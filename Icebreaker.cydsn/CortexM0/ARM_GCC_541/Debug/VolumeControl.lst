ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"VolumeControl.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.DmaIntHandler,"ax",%progbits
  20              		.align	2
  21              		.global	DmaIntHandler
  22              		.code	16
  23              		.thumb_func
  24              		.type	DmaIntHandler, %function
  25              	DmaIntHandler:
  26              	.LFB34:
  27              		.file 1 "VolumeControl.c"
   1:VolumeControl.c **** /* ========================================
   2:VolumeControl.c ****  *
   3:VolumeControl.c ****  * Copyright YOUR COMPANY, THE YEAR
   4:VolumeControl.c ****  * All Rights Reserved
   5:VolumeControl.c ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:VolumeControl.c ****  *
   7:VolumeControl.c ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:VolumeControl.c ****  * WHICH IS THE PROPERTY OF your company.
   9:VolumeControl.c ****  *
  10:VolumeControl.c ****  * ========================================
  11:VolumeControl.c **** */
  12:VolumeControl.c **** #include "VolumeControl.h"
  13:VolumeControl.c **** #include <Config.h>
  14:VolumeControl.c **** #include <Application.h>
  15:VolumeControl.c **** #include <ADC.h>
  16:VolumeControl.c **** #include <DMA.h>
  17:VolumeControl.c **** #include <Codec.h>
  18:VolumeControl.c **** //#include <USBFS.h>
  19:VolumeControl.c **** 
  20:VolumeControl.c **** int32 ADC_MIN_READING[vol_ctrl_both] = { -2, -2 };
  21:VolumeControl.c **** int32 ADC_MAX_READING[vol_ctrl_both] = { 2047, 2047 };
  22:VolumeControl.c **** 
  23:VolumeControl.c **** #define ADC_READING_RANGE(side)       (ADC_MAX_READING[side] - ADC_MIN_READING[side])
  24:VolumeControl.c **** 
  25:VolumeControl.c **** /* ADC measurement status and result */
  26:VolumeControl.c **** int16   adcSample[vol_ctrl_both] = { 0, 0 };
  27:VolumeControl.c **** 
  28:VolumeControl.c **** CY_ISR(DmaIntHandler)
  29:VolumeControl.c **** {
  28              		.loc 1 29 0
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 2


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  30:VolumeControl.c ****     // Do nothing
  31:VolumeControl.c **** }
  33              		.loc 1 31 0
  34              		@ sp needed
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE34:
  38              		.size	DmaIntHandler, .-DmaIntHandler
  39 0002 C046     		.section	.text.VolumeControlInit,"ax",%progbits
  40              		.align	2
  41              		.global	VolumeControlInit
  42              		.code	16
  43              		.thumb_func
  44              		.type	VolumeControlInit, %function
  45              	VolumeControlInit:
  46              	.LFB35:
  32:VolumeControl.c **** 
  33:VolumeControl.c **** void VolumeControlInit(void)
  34:VolumeControl.c **** {
  47              		.loc 1 34 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51 0000 10B5     		push	{r4, lr}
  52              		.cfi_def_cfa_offset 8
  53              		.cfi_offset 4, -8
  54              		.cfi_offset 14, -4
  35:VolumeControl.c ****     /* Initialize ADC. Conversion is not enabled yet. */
  36:VolumeControl.c ****     ADC_Start();
  55              		.loc 1 36 0
  56 0002 FFF7FEFF 		bl	ADC_Start
  57              	.LVL0:
  37:VolumeControl.c **** 
  38:VolumeControl.c ****     /* Configure DMA source and destination locations to transfer from
  39:VolumeControl.c ****     * ADC data register to memory variable.
  40:VolumeControl.c ****     */
  41:VolumeControl.c ****     DMA_Start((void *)ADC_SAR_CHAN0_RESULT_PTR, (void *)adcSample);
  58              		.loc 1 41 0
  59 0006 0549     		ldr	r1, .L3
  60 0008 0548     		ldr	r0, .L3+4
  61 000a FFF7FEFF 		bl	DMA_Start
  62              	.LVL1:
  63              	.LBB4:
  64              	.LBB5:
  65              		.file 2 "Generated_Source\\PSoC4/DMA.h"
   1:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
   2:Generated_Source\PSoC4/DMA.h **** * File Name: DMA.h
   3:Generated_Source\PSoC4/DMA.h **** * Version 1.0
   4:Generated_Source\PSoC4/DMA.h **** *
   5:Generated_Source\PSoC4/DMA.h **** * Description:
   6:Generated_Source\PSoC4/DMA.h **** *  This file provides DMA channel defines and API function definitions.
   7:Generated_Source\PSoC4/DMA.h **** *
   8:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 3


   9:Generated_Source\PSoC4/DMA.h **** * Copyright 2015, Cypress Semiconductor Corporation. All rights reserved.
  10:Generated_Source\PSoC4/DMA.h **** * You may use this file only in accordance with the license, terms, conditions,
  11:Generated_Source\PSoC4/DMA.h **** * disclaimers, and limitations in the end user license agreement accompanying
  12:Generated_Source\PSoC4/DMA.h **** * the software package with which this file was provided.
  13:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
  14:Generated_Source\PSoC4/DMA.h **** 
  15:Generated_Source\PSoC4/DMA.h **** #ifndef CY_DMA_CHANNEL_DMA_H
  16:Generated_Source\PSoC4/DMA.h **** #define CY_DMA_CHANNEL_DMA_H
  17:Generated_Source\PSoC4/DMA.h **** 
  18:Generated_Source\PSoC4/DMA.h **** #include "CyDMA.h"
  19:Generated_Source\PSoC4/DMA.h **** 
  20:Generated_Source\PSoC4/DMA.h ****     
  21:Generated_Source\PSoC4/DMA.h **** /***************************************
  22:Generated_Source\PSoC4/DMA.h **** *   Conditional Compilation Parameters
  23:Generated_Source\PSoC4/DMA.h **** ***************************************/
  24:Generated_Source\PSoC4/DMA.h **** 
  25:Generated_Source\PSoC4/DMA.h **** #define DMA_CHANNEL           (DMA__CHANNEL_NUMBER)
  26:Generated_Source\PSoC4/DMA.h **** #define DMA_CHANNEL_MASK      ((uint32)(1UL << DMA_CHANNEL))
  27:Generated_Source\PSoC4/DMA.h **** 
  28:Generated_Source\PSoC4/DMA.h **** 
  29:Generated_Source\PSoC4/DMA.h **** /***************************************
  30:Generated_Source\PSoC4/DMA.h **** *        Function Prototypes
  31:Generated_Source\PSoC4/DMA.h **** ***************************************/
  32:Generated_Source\PSoC4/DMA.h **** 
  33:Generated_Source\PSoC4/DMA.h **** /* Functions specific to this DMA channel */
  34:Generated_Source\PSoC4/DMA.h **** void DMA_Init(void);
  35:Generated_Source\PSoC4/DMA.h **** void DMA_Start(void * srcAddress, void * dstAddress);
  36:Generated_Source\PSoC4/DMA.h **** 
  37:Generated_Source\PSoC4/DMA.h **** /* Inline functions that call global API functions */
  38:Generated_Source\PSoC4/DMA.h **** static void   DMA_ChEnable(void);
  39:Generated_Source\PSoC4/DMA.h **** static void   DMA_ChDisable(void);
  40:Generated_Source\PSoC4/DMA.h **** static void   DMA_Trigger(void);
  41:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetPriority(int32 priority);
  42:Generated_Source\PSoC4/DMA.h **** static int32  DMA_GetPriority(void);
  43:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetNextDescriptor(int32 descriptor);
  44:Generated_Source\PSoC4/DMA.h **** static int32  DMA_GetNextDescriptor(void);
  45:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetConfiguration(int32 descriptor, const cydma_init_struct * config);
  46:Generated_Source\PSoC4/DMA.h **** static void   DMA_ValidateDescriptor(int32 descriptor);
  47:Generated_Source\PSoC4/DMA.h **** static uint32 DMA_GetDescriptorStatus(int32 descriptor);
  48:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetSrcAddress(int32 descriptor, void * srcAddress);
  49:Generated_Source\PSoC4/DMA.h **** static void * DMA_GetSrcAddress(int32 descriptor);
  50:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetDstAddress(int32 descriptor, void * dstAddress);
  51:Generated_Source\PSoC4/DMA.h **** static void * DMA_GetDstAddress(int32 descriptor);
  52:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetDataElementSize(int32 descriptor, uint32 dataElementSize);
  53:Generated_Source\PSoC4/DMA.h **** static uint32 DMA_GetDataElementSize(int32 descriptor);
  54:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetNumDataElements(int32 descriptor, int32 numDataElements);
  55:Generated_Source\PSoC4/DMA.h **** static int32  DMA_GetNumDataElements(int32 descriptor);
  56:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetSrcDstTransferWidth(int32 descriptor, uint32 transferWidth);
  57:Generated_Source\PSoC4/DMA.h **** static uint32 DMA_GetSrcDstTransferWidth(int32 descriptor);
  58:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetAddressIncrement(int32 descriptor, uint32 addressIncrement);
  59:Generated_Source\PSoC4/DMA.h **** static uint32 DMA_GetAddressIncrement(int32 descriptor);
  60:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetTriggerType(int32 descriptor, uint32 triggerType);
  61:Generated_Source\PSoC4/DMA.h **** static uint32 DMA_GetTriggerType(int32 descriptor);
  62:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetTransferMode(int32 descriptor, uint32 transferMode);
  63:Generated_Source\PSoC4/DMA.h **** static uint32 DMA_GetTransferMode(int32 descriptor);
  64:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetPreemptable(int32 descriptor, uint32 preemptable);
  65:Generated_Source\PSoC4/DMA.h **** static uint32 DMA_GetPreemptable(int32 descriptor);
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 4


  66:Generated_Source\PSoC4/DMA.h **** static void   DMA_SetPostCompletionActions(int32 descriptor, uint32 actions);
  67:Generated_Source\PSoC4/DMA.h **** static uint32 DMA_GetPostCompletionAction(int32 descriptor);
  68:Generated_Source\PSoC4/DMA.h **** static cydma_callback_t DMA_SetInterruptCallback(cydma_callback_t callback);
  69:Generated_Source\PSoC4/DMA.h **** static cydma_callback_t DMA_GetInterruptCallback(void);
  70:Generated_Source\PSoC4/DMA.h **** 
  71:Generated_Source\PSoC4/DMA.h **** 
  72:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
  73:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_ChEnable
  74:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
  75:Generated_Source\PSoC4/DMA.h **** *
  76:Generated_Source\PSoC4/DMA.h **** * Summary:
  77:Generated_Source\PSoC4/DMA.h **** *  Enables the DMA channel. It is not necessary to call DMA_ChEnable()
  78:Generated_Source\PSoC4/DMA.h **** *  because the DMA_Start() API calls this function, which is the
  79:Generated_Source\PSoC4/DMA.h **** *  preferred method to begin the component operation.
  80:Generated_Source\PSoC4/DMA.h **** *
  81:Generated_Source\PSoC4/DMA.h **** * Parameters:
  82:Generated_Source\PSoC4/DMA.h **** *  None.
  83:Generated_Source\PSoC4/DMA.h **** *                   
  84:Generated_Source\PSoC4/DMA.h **** * Return:
  85:Generated_Source\PSoC4/DMA.h **** *  None.
  86:Generated_Source\PSoC4/DMA.h **** *
  87:Generated_Source\PSoC4/DMA.h **** * Side effect:
  88:Generated_Source\PSoC4/DMA.h **** *  If this function is called before DMA_Start(), or DMA_Init()
  89:Generated_Source\PSoC4/DMA.h **** *  or DMA_SetConfiguration(), and DMA_SetSrcAddress()
  90:Generated_Source\PSoC4/DMA.h **** *  and DMA_SetDstAddress the operation of the DMA is 
  91:Generated_Source\PSoC4/DMA.h **** *  undefined and could result in system data corruption. 
  92:Generated_Source\PSoC4/DMA.h **** *
  93:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
  94:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_ChEnable(void)
  95:Generated_Source\PSoC4/DMA.h **** {
  96:Generated_Source\PSoC4/DMA.h ****     CyDmaChEnable(DMA_CHANNEL);
  97:Generated_Source\PSoC4/DMA.h **** }
  98:Generated_Source\PSoC4/DMA.h **** 
  99:Generated_Source\PSoC4/DMA.h **** 
 100:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 101:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_ChDisable
 102:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 103:Generated_Source\PSoC4/DMA.h **** *
 104:Generated_Source\PSoC4/DMA.h **** * Summary:
 105:Generated_Source\PSoC4/DMA.h **** *  Disables the DMA channel.
 106:Generated_Source\PSoC4/DMA.h **** *
 107:Generated_Source\PSoC4/DMA.h **** * Parameters:
 108:Generated_Source\PSoC4/DMA.h **** *  None.
 109:Generated_Source\PSoC4/DMA.h **** *                   
 110:Generated_Source\PSoC4/DMA.h **** * Return:
 111:Generated_Source\PSoC4/DMA.h **** *  None.
 112:Generated_Source\PSoC4/DMA.h **** *
 113:Generated_Source\PSoC4/DMA.h **** * Side effect:
 114:Generated_Source\PSoC4/DMA.h **** *  If this function is called during a DMA transfer the transfer is aborted. 
 115:Generated_Source\PSoC4/DMA.h **** *
 116:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 117:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_ChDisable(void)
 118:Generated_Source\PSoC4/DMA.h **** {
 119:Generated_Source\PSoC4/DMA.h ****     CyDmaChDisable(DMA_CHANNEL);
 120:Generated_Source\PSoC4/DMA.h **** }
 121:Generated_Source\PSoC4/DMA.h **** 
 122:Generated_Source\PSoC4/DMA.h **** 
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 5


 123:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 124:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_Trigger
 125:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 126:Generated_Source\PSoC4/DMA.h **** *
 127:Generated_Source\PSoC4/DMA.h **** * Summary:
 128:Generated_Source\PSoC4/DMA.h **** *  Triggers the DMA channel, this is useful only for software triggers. This is
 129:Generated_Source\PSoC4/DMA.h **** *  not needed when hardware triggers are used.
 130:Generated_Source\PSoC4/DMA.h **** *
 131:Generated_Source\PSoC4/DMA.h **** * Parameters:
 132:Generated_Source\PSoC4/DMA.h **** *  None.
 133:Generated_Source\PSoC4/DMA.h **** *                   
 134:Generated_Source\PSoC4/DMA.h **** * Return:
 135:Generated_Source\PSoC4/DMA.h **** *  None. 
 136:Generated_Source\PSoC4/DMA.h **** *
 137:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 138:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_Trigger(void)
 139:Generated_Source\PSoC4/DMA.h **** {
 140:Generated_Source\PSoC4/DMA.h ****     CyDmaTrigger(DMA_CHANNEL);
 141:Generated_Source\PSoC4/DMA.h **** }
 142:Generated_Source\PSoC4/DMA.h **** 
 143:Generated_Source\PSoC4/DMA.h **** 
 144:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 145:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetPriority
 146:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 147:Generated_Source\PSoC4/DMA.h **** *
 148:Generated_Source\PSoC4/DMA.h **** * Summary:
 149:Generated_Source\PSoC4/DMA.h **** *  Sets the priority for the channel.
 150:Generated_Source\PSoC4/DMA.h **** *
 151:Generated_Source\PSoC4/DMA.h **** * Parameters:
 152:Generated_Source\PSoC4/DMA.h **** *  priority: Priority for channel. Priority can be 0,1,2, or 3.
 153:Generated_Source\PSoC4/DMA.h **** *            0 is the highest priority.
 154:Generated_Source\PSoC4/DMA.h **** *                   
 155:Generated_Source\PSoC4/DMA.h **** * Return:
 156:Generated_Source\PSoC4/DMA.h **** *  None.
 157:Generated_Source\PSoC4/DMA.h **** *
 158:Generated_Source\PSoC4/DMA.h **** * Side effect:
 159:Generated_Source\PSoC4/DMA.h **** *  This function should not be called while the channel is enabled.
 160:Generated_Source\PSoC4/DMA.h **** *
 161:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 162:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetPriority(int32 priority)
 163:Generated_Source\PSoC4/DMA.h **** {
 164:Generated_Source\PSoC4/DMA.h ****     CyDmaSetPriority(DMA_CHANNEL, priority);
 165:Generated_Source\PSoC4/DMA.h **** }
 166:Generated_Source\PSoC4/DMA.h **** 
 167:Generated_Source\PSoC4/DMA.h **** 
 168:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 169:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetPriority
 170:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 171:Generated_Source\PSoC4/DMA.h **** *
 172:Generated_Source\PSoC4/DMA.h **** * Summary:
 173:Generated_Source\PSoC4/DMA.h **** *  Gets the priority for the channel.
 174:Generated_Source\PSoC4/DMA.h **** *
 175:Generated_Source\PSoC4/DMA.h **** * Parameters:
 176:Generated_Source\PSoC4/DMA.h **** *  None.
 177:Generated_Source\PSoC4/DMA.h **** *                   
 178:Generated_Source\PSoC4/DMA.h **** * Return:
 179:Generated_Source\PSoC4/DMA.h **** *  Priority for channel. Priority can be 0,1,2, or 3. 0 is the highest priority.
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 6


 180:Generated_Source\PSoC4/DMA.h **** *
 181:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 182:Generated_Source\PSoC4/DMA.h **** static CY_INLINE int32 DMA_GetPriority(void)
 183:Generated_Source\PSoC4/DMA.h **** {
 184:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetPriority(DMA_CHANNEL));
 185:Generated_Source\PSoC4/DMA.h **** }
 186:Generated_Source\PSoC4/DMA.h **** 
 187:Generated_Source\PSoC4/DMA.h **** 
 188:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 189:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetNextDescriptor
 190:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 191:Generated_Source\PSoC4/DMA.h **** *
 192:Generated_Source\PSoC4/DMA.h **** * Summary:
 193:Generated_Source\PSoC4/DMA.h **** *  Sets the descriptor that should be run the next time the channel is
 194:Generated_Source\PSoC4/DMA.h **** *  triggered.
 195:Generated_Source\PSoC4/DMA.h **** *
 196:Generated_Source\PSoC4/DMA.h **** * Parameters:
 197:Generated_Source\PSoC4/DMA.h **** *  descriptor: Next Descriptor to run (0 or 1).
 198:Generated_Source\PSoC4/DMA.h **** *                   
 199:Generated_Source\PSoC4/DMA.h **** * Side effect:
 200:Generated_Source\PSoC4/DMA.h **** *  This function should not be called while the channel is enabled.
 201:Generated_Source\PSoC4/DMA.h **** *
 202:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 203:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetNextDescriptor(int32 descriptor)
 204:Generated_Source\PSoC4/DMA.h **** {
 205:Generated_Source\PSoC4/DMA.h ****     CyDmaSetNextDescriptor(DMA_CHANNEL, descriptor);
 206:Generated_Source\PSoC4/DMA.h **** }
 207:Generated_Source\PSoC4/DMA.h **** 
 208:Generated_Source\PSoC4/DMA.h **** 
 209:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 210:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetNextDescriptor
 211:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 212:Generated_Source\PSoC4/DMA.h **** *
 213:Generated_Source\PSoC4/DMA.h **** * Summary:
 214:Generated_Source\PSoC4/DMA.h **** *  Returns the next descriptor that should be run, as set by 
 215:Generated_Source\PSoC4/DMA.h **** *  DMA_SetNextDescriptor().
 216:Generated_Source\PSoC4/DMA.h **** *
 217:Generated_Source\PSoC4/DMA.h **** * Parameters:
 218:Generated_Source\PSoC4/DMA.h **** *  None.
 219:Generated_Source\PSoC4/DMA.h **** *                   
 220:Generated_Source\PSoC4/DMA.h **** * Return:
 221:Generated_Source\PSoC4/DMA.h **** *  Next Descriptor to run (0 or 1).
 222:Generated_Source\PSoC4/DMA.h **** *
 223:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 224:Generated_Source\PSoC4/DMA.h **** static CY_INLINE int32 DMA_GetNextDescriptor(void)
 225:Generated_Source\PSoC4/DMA.h **** {
 226:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetNextDescriptor(DMA_CHANNEL));
 227:Generated_Source\PSoC4/DMA.h **** }
 228:Generated_Source\PSoC4/DMA.h **** 
 229:Generated_Source\PSoC4/DMA.h **** 
 230:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 231:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetConfiguration
 232:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 233:Generated_Source\PSoC4/DMA.h **** *
 234:Generated_Source\PSoC4/DMA.h **** * Summary:
 235:Generated_Source\PSoC4/DMA.h **** *  Sets configuration information for the specified descriptor.
 236:Generated_Source\PSoC4/DMA.h **** *
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 7


 237:Generated_Source\PSoC4/DMA.h **** * Parameters:
 238:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 239:Generated_Source\PSoC4/DMA.h **** *  config: Pointer to a configuration structure. Refer to cydma_init_struct
 240:Generated_Source\PSoC4/DMA.h **** *          structure definition in CyDMA_P4.h or the component datasheet.
 241:Generated_Source\PSoC4/DMA.h **** *                   
 242:Generated_Source\PSoC4/DMA.h **** * Return:
 243:Generated_Source\PSoC4/DMA.h **** *  None.
 244:Generated_Source\PSoC4/DMA.h **** *
 245:Generated_Source\PSoC4/DMA.h **** * Side effect:
 246:Generated_Source\PSoC4/DMA.h **** *  The status register associated with the specified descriptor is reset to
 247:Generated_Source\PSoC4/DMA.h **** *  zero after this function call. This function also validates the descriptor.
 248:Generated_Source\PSoC4/DMA.h **** *  This function should not be called while the descriptor is active.
 249:Generated_Source\PSoC4/DMA.h **** *  This can be checked by calling CyDmaGetStatus().
 250:Generated_Source\PSoC4/DMA.h **** *
 251:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 252:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetConfiguration(int32 descriptor, const cydma_init_struct * config)
 253:Generated_Source\PSoC4/DMA.h **** {
 254:Generated_Source\PSoC4/DMA.h ****     CyDmaSetConfiguration(DMA_CHANNEL, descriptor, config);
 255:Generated_Source\PSoC4/DMA.h **** }
 256:Generated_Source\PSoC4/DMA.h **** 
 257:Generated_Source\PSoC4/DMA.h **** 
 258:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 259:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_ValidateDescriptor
 260:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 261:Generated_Source\PSoC4/DMA.h **** *
 262:Generated_Source\PSoC4/DMA.h **** * Summary:
 263:Generated_Source\PSoC4/DMA.h **** *  Validates the specified descriptor after it has been invalidated.
 264:Generated_Source\PSoC4/DMA.h **** *
 265:Generated_Source\PSoC4/DMA.h **** * Parameters:
 266:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 267:Generated_Source\PSoC4/DMA.h **** *                   
 268:Generated_Source\PSoC4/DMA.h **** * Return:
 269:Generated_Source\PSoC4/DMA.h **** *  None. 
 270:Generated_Source\PSoC4/DMA.h **** *
 271:Generated_Source\PSoC4/DMA.h **** * Side effect:
 272:Generated_Source\PSoC4/DMA.h **** *  The status register associated with the specified descriptor is reset to
 273:Generated_Source\PSoC4/DMA.h **** *  zero after this function call. This function should not be called while the
 274:Generated_Source\PSoC4/DMA.h **** *  descriptor is active. This can be checked by calling CyDmaGetStatus().
 275:Generated_Source\PSoC4/DMA.h **** *
 276:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 277:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_ValidateDescriptor(int32 descriptor)
 278:Generated_Source\PSoC4/DMA.h **** {
 279:Generated_Source\PSoC4/DMA.h ****     CyDmaValidateDescriptor(DMA_CHANNEL, descriptor);
 280:Generated_Source\PSoC4/DMA.h **** }
 281:Generated_Source\PSoC4/DMA.h **** 
 282:Generated_Source\PSoC4/DMA.h **** 
 283:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 284:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetDescriptorStatus
 285:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 286:Generated_Source\PSoC4/DMA.h **** *
 287:Generated_Source\PSoC4/DMA.h **** * Summary:
 288:Generated_Source\PSoC4/DMA.h **** *  Returns the status of the specified descriptor.
 289:Generated_Source\PSoC4/DMA.h **** *
 290:Generated_Source\PSoC4/DMA.h **** * Parameters:
 291:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 292:Generated_Source\PSoC4/DMA.h **** *                   
 293:Generated_Source\PSoC4/DMA.h **** * Return:
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 8


 294:Generated_Source\PSoC4/DMA.h **** *  Returns the contents of the specified descriptors status register. Refer to 
 295:Generated_Source\PSoC4/DMA.h **** *  descriptor status register bit definitions in CyDMA_P4.h or the API
 296:Generated_Source\PSoC4/DMA.h **** *  description in the DMA channel datasheet for more information.
 297:Generated_Source\PSoC4/DMA.h **** *
 298:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 299:Generated_Source\PSoC4/DMA.h **** static CY_INLINE uint32 DMA_GetDescriptorStatus(int32 descriptor)
 300:Generated_Source\PSoC4/DMA.h **** {
 301:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetDescriptorStatus(DMA_CHANNEL, descriptor));
 302:Generated_Source\PSoC4/DMA.h **** }
 303:Generated_Source\PSoC4/DMA.h **** 
 304:Generated_Source\PSoC4/DMA.h **** 
 305:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 306:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetSrcAddress
 307:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 308:Generated_Source\PSoC4/DMA.h **** *
 309:Generated_Source\PSoC4/DMA.h **** * Summary:
 310:Generated_Source\PSoC4/DMA.h **** *  Configures the source address for the specified descriptor.
 311:Generated_Source\PSoC4/DMA.h **** *
 312:Generated_Source\PSoC4/DMA.h **** * Parameters:
 313:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 314:Generated_Source\PSoC4/DMA.h **** *  srcAddress: Address of DMA transfer source.
 315:Generated_Source\PSoC4/DMA.h **** *                   
 316:Generated_Source\PSoC4/DMA.h **** * Return:
 317:Generated_Source\PSoC4/DMA.h **** *  None.
 318:Generated_Source\PSoC4/DMA.h **** *
 319:Generated_Source\PSoC4/DMA.h **** * Side effect:
 320:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 321:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 322:Generated_Source\PSoC4/DMA.h **** *
 323:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 324:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetSrcAddress(int32 descriptor, void * srcAddress)
 325:Generated_Source\PSoC4/DMA.h **** {
 326:Generated_Source\PSoC4/DMA.h ****     CyDmaSetSrcAddress(DMA_CHANNEL, descriptor, srcAddress);
 327:Generated_Source\PSoC4/DMA.h **** }
 328:Generated_Source\PSoC4/DMA.h **** 
 329:Generated_Source\PSoC4/DMA.h **** 
 330:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 331:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetSrcAddress
 332:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 333:Generated_Source\PSoC4/DMA.h **** *
 334:Generated_Source\PSoC4/DMA.h **** * Summary:
 335:Generated_Source\PSoC4/DMA.h **** *  Returns the source address for the specified descriptor, set by either 
 336:Generated_Source\PSoC4/DMA.h **** *  DMA_Start() or DMA_SetSrcAddress().
 337:Generated_Source\PSoC4/DMA.h **** *
 338:Generated_Source\PSoC4/DMA.h **** * Parameters:
 339:Generated_Source\PSoC4/DMA.h **** *  descriptor: Specifies descriptor (0 or 1) used by this function.
 340:Generated_Source\PSoC4/DMA.h **** *                   
 341:Generated_Source\PSoC4/DMA.h **** * Return:
 342:Generated_Source\PSoC4/DMA.h **** *  Source address written to specified descriptor.
 343:Generated_Source\PSoC4/DMA.h **** *
 344:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 345:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void * DMA_GetSrcAddress(int32 descriptor)
 346:Generated_Source\PSoC4/DMA.h **** {
 347:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetSrcAddress(DMA_CHANNEL, descriptor));
 348:Generated_Source\PSoC4/DMA.h **** }
 349:Generated_Source\PSoC4/DMA.h **** 
 350:Generated_Source\PSoC4/DMA.h **** 
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 9


 351:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 352:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetDstAddress
 353:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 354:Generated_Source\PSoC4/DMA.h **** *
 355:Generated_Source\PSoC4/DMA.h **** * Summary:
 356:Generated_Source\PSoC4/DMA.h **** *  Configures the destination address for the specified descriptor.
 357:Generated_Source\PSoC4/DMA.h **** *
 358:Generated_Source\PSoC4/DMA.h **** * Parameters:
 359:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 360:Generated_Source\PSoC4/DMA.h **** *  dstAddress: Address of DMA transfer destination.
 361:Generated_Source\PSoC4/DMA.h **** *                   
 362:Generated_Source\PSoC4/DMA.h **** * Return:
 363:Generated_Source\PSoC4/DMA.h **** *  None.
 364:Generated_Source\PSoC4/DMA.h **** *
 365:Generated_Source\PSoC4/DMA.h **** * Side effect:
 366:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 367:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 368:Generated_Source\PSoC4/DMA.h **** *
 369:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 370:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetDstAddress(int32 descriptor, void * dstAddress)
 371:Generated_Source\PSoC4/DMA.h **** {
 372:Generated_Source\PSoC4/DMA.h ****     CyDmaSetDstAddress(DMA_CHANNEL, descriptor, dstAddress);
 373:Generated_Source\PSoC4/DMA.h **** }
 374:Generated_Source\PSoC4/DMA.h **** 
 375:Generated_Source\PSoC4/DMA.h **** 
 376:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 377:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetDstAddress
 378:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 379:Generated_Source\PSoC4/DMA.h **** *
 380:Generated_Source\PSoC4/DMA.h **** * Summary:
 381:Generated_Source\PSoC4/DMA.h **** *  Returns the destination address for the specified descriptor, set by either 
 382:Generated_Source\PSoC4/DMA.h **** *  DMA_Start() or DMA_SetDstAddress().
 383:Generated_Source\PSoC4/DMA.h **** *
 384:Generated_Source\PSoC4/DMA.h **** * Parameters:
 385:Generated_Source\PSoC4/DMA.h **** *  descriptor: Specifies descriptor (0 or 1) used by this function.
 386:Generated_Source\PSoC4/DMA.h **** *                   
 387:Generated_Source\PSoC4/DMA.h **** * Return:
 388:Generated_Source\PSoC4/DMA.h **** *  Destination address written to specified descriptor.
 389:Generated_Source\PSoC4/DMA.h **** *
 390:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 391:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void * DMA_GetDstAddress(int32 descriptor)
 392:Generated_Source\PSoC4/DMA.h **** {
 393:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetDstAddress(DMA_CHANNEL, descriptor));
 394:Generated_Source\PSoC4/DMA.h **** }
 395:Generated_Source\PSoC4/DMA.h **** 
 396:Generated_Source\PSoC4/DMA.h **** 
 397:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 398:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetDataElementSize
 399:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 400:Generated_Source\PSoC4/DMA.h **** *
 401:Generated_Source\PSoC4/DMA.h **** * Summary:
 402:Generated_Source\PSoC4/DMA.h **** *  Sets the data element size for the specified descriptor.
 403:Generated_Source\PSoC4/DMA.h **** *
 404:Generated_Source\PSoC4/DMA.h **** * Parameters:
 405:Generated_Source\PSoC4/DMA.h **** *  descriptor:      Descriptor (0 or 1) modified by this function.
 406:Generated_Source\PSoC4/DMA.h **** *  dataElementSize: Specifies the size of the data element. The DMA transfer
 407:Generated_Source\PSoC4/DMA.h **** *                   engine transfers one data element at a time. How these
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 10


 408:Generated_Source\PSoC4/DMA.h **** *                   transfers occur is controlled by the transfer mode.
 409:Generated_Source\PSoC4/DMA.h **** *                   Refer to the API bit field definitions in CyDMA_P4.h or API
 410:Generated_Source\PSoC4/DMA.h **** *                   description in the DMA channel datasheet for the parameter
 411:Generated_Source\PSoC4/DMA.h **** *                   options.
 412:Generated_Source\PSoC4/DMA.h **** *
 413:Generated_Source\PSoC4/DMA.h **** * Return:
 414:Generated_Source\PSoC4/DMA.h **** *  None.
 415:Generated_Source\PSoC4/DMA.h **** *
 416:Generated_Source\PSoC4/DMA.h **** * Side effect:
 417:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 418:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 419:Generated_Source\PSoC4/DMA.h **** *
 420:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 421:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetDataElementSize(int32 descriptor, uint32 dataElementSize)
 422:Generated_Source\PSoC4/DMA.h **** {
 423:Generated_Source\PSoC4/DMA.h ****     CyDmaSetDataElementSize(DMA_CHANNEL, descriptor, dataElementSize);
 424:Generated_Source\PSoC4/DMA.h **** }
 425:Generated_Source\PSoC4/DMA.h **** 
 426:Generated_Source\PSoC4/DMA.h **** 
 427:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 428:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetDataElementSize
 429:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 430:Generated_Source\PSoC4/DMA.h **** *
 431:Generated_Source\PSoC4/DMA.h **** * Summary:
 432:Generated_Source\PSoC4/DMA.h **** *  Returns the data element size configured for the specified descriptor, set by
 433:Generated_Source\PSoC4/DMA.h **** *  DMA_SetDataElementSize() or DMA_SetConfiguration().
 434:Generated_Source\PSoC4/DMA.h **** *
 435:Generated_Source\PSoC4/DMA.h **** * Parameters:
 436:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 437:Generated_Source\PSoC4/DMA.h **** *                   
 438:Generated_Source\PSoC4/DMA.h **** * Return:
 439:Generated_Source\PSoC4/DMA.h **** *  The size of the data element. The DMA transfer engine transfers one data
 440:Generated_Source\PSoC4/DMA.h **** *  element at a time. How these transfers occur is controlled by the transfer
 441:Generated_Source\PSoC4/DMA.h **** *  mode. Refer to the API bit field definitions in CyDMA_P4.h or the API 
 442:Generated_Source\PSoC4/DMA.h **** *  description in the DMA channel datasheet for more information.
 443:Generated_Source\PSoC4/DMA.h **** *
 444:Generated_Source\PSoC4/DMA.h **** * Note:
 445:Generated_Source\PSoC4/DMA.h **** *  The size of the source and destination can be configured to use the
 446:Generated_Source\PSoC4/DMA.h **** *  data element size, or a Word, this is set in DMA_SetSrcDstTransferWidth().
 447:Generated_Source\PSoC4/DMA.h **** *
 448:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 449:Generated_Source\PSoC4/DMA.h **** static CY_INLINE uint32 DMA_GetDataElementSize(int32 descriptor)
 450:Generated_Source\PSoC4/DMA.h **** {
 451:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetDataElementSize(DMA_CHANNEL, descriptor));
 452:Generated_Source\PSoC4/DMA.h **** }
 453:Generated_Source\PSoC4/DMA.h **** 
 454:Generated_Source\PSoC4/DMA.h **** 
 455:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 456:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetNumDataElements
 457:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 458:Generated_Source\PSoC4/DMA.h **** *
 459:Generated_Source\PSoC4/DMA.h **** * Summary:
 460:Generated_Source\PSoC4/DMA.h **** *  Sets the number of data elements to transfer for specified descriptor.
 461:Generated_Source\PSoC4/DMA.h **** *
 462:Generated_Source\PSoC4/DMA.h **** * Parameters:
 463:Generated_Source\PSoC4/DMA.h **** *  descriptor:      Descriptor (0 or 1) modified by this function.
 464:Generated_Source\PSoC4/DMA.h **** *  numDataElements: Total number of data elements this descriptor transfers.
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 11


 465:Generated_Source\PSoC4/DMA.h **** *                   Valid ranges are 1 to 65536.
 466:Generated_Source\PSoC4/DMA.h **** *                   
 467:Generated_Source\PSoC4/DMA.h **** * Return:
 468:Generated_Source\PSoC4/DMA.h **** *  None.
 469:Generated_Source\PSoC4/DMA.h **** *
 470:Generated_Source\PSoC4/DMA.h **** * Side effect:
 471:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 472:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 473:Generated_Source\PSoC4/DMA.h **** *
 474:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 475:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetNumDataElements(int32 descriptor, int32 numDataElements)
 476:Generated_Source\PSoC4/DMA.h **** {
 477:Generated_Source\PSoC4/DMA.h ****     CyDmaSetNumDataElements(DMA_CHANNEL, descriptor, numDataElements);
 478:Generated_Source\PSoC4/DMA.h **** }
 479:Generated_Source\PSoC4/DMA.h **** 
 480:Generated_Source\PSoC4/DMA.h **** 
 481:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 482:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetNumDataElements
 483:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 484:Generated_Source\PSoC4/DMA.h **** *
 485:Generated_Source\PSoC4/DMA.h **** * Summary:
 486:Generated_Source\PSoC4/DMA.h **** *  Returns the number of data elements to be transferred. Only reflects the
 487:Generated_Source\PSoC4/DMA.h **** *  value written by DMA_SetNumDataElements() or DMA_SetConfiguration().
 488:Generated_Source\PSoC4/DMA.h **** *  This does not reflect how many elements have been transferred. For that
 489:Generated_Source\PSoC4/DMA.h **** *  information use the DMA_GetDescriptorStatus() function.
 490:Generated_Source\PSoC4/DMA.h **** *
 491:Generated_Source\PSoC4/DMA.h **** * Parameters:
 492:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 493:Generated_Source\PSoC4/DMA.h **** *                   
 494:Generated_Source\PSoC4/DMA.h **** * Return:
 495:Generated_Source\PSoC4/DMA.h **** *  Number of data elements to transfer.
 496:Generated_Source\PSoC4/DMA.h **** *
 497:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 498:Generated_Source\PSoC4/DMA.h **** static CY_INLINE int32 DMA_GetNumDataElements(int32 descriptor)
 499:Generated_Source\PSoC4/DMA.h **** {
 500:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetNumDataElements(DMA_CHANNEL, descriptor));
 501:Generated_Source\PSoC4/DMA.h **** }
 502:Generated_Source\PSoC4/DMA.h **** 
 503:Generated_Source\PSoC4/DMA.h **** 
 504:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 505:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetSrcDstTransferWidth
 506:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 507:Generated_Source\PSoC4/DMA.h **** *
 508:Generated_Source\PSoC4/DMA.h **** * Summary:
 509:Generated_Source\PSoC4/DMA.h **** *  Sets the width of the source and destination. The DMA can either read and
 510:Generated_Source\PSoC4/DMA.h **** *  write data from the source and destination at the size specified by
 511:Generated_Source\PSoC4/DMA.h **** *  DMA_SetDataElementSize() or by a word (4bytes). This also determines how
 512:Generated_Source\PSoC4/DMA.h **** *  many bytes the addresses are incremented if increment source and destination
 513:Generated_Source\PSoC4/DMA.h **** *  address are turned on.
 514:Generated_Source\PSoC4/DMA.h **** *
 515:Generated_Source\PSoC4/DMA.h **** * Parameters:
 516:Generated_Source\PSoC4/DMA.h **** *  descriptor:    Descriptor (0 or 1) modified by this function.
 517:Generated_Source\PSoC4/DMA.h **** *  transferWidth: Specifies the source and destination widths. Refer to the API
 518:Generated_Source\PSoC4/DMA.h **** *                 bit field definitions in CyDMA_P4.h or the API description in
 519:Generated_Source\PSoC4/DMA.h **** *                 the DMA channel datasheet for the parameter options.
 520:Generated_Source\PSoC4/DMA.h **** *                   
 521:Generated_Source\PSoC4/DMA.h **** * Return:
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 12


 522:Generated_Source\PSoC4/DMA.h **** *  None.
 523:Generated_Source\PSoC4/DMA.h **** *
 524:Generated_Source\PSoC4/DMA.h **** * Side effect:
 525:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 526:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 527:Generated_Source\PSoC4/DMA.h **** *
 528:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 529:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetSrcDstTransferWidth(int32 descriptor, uint32 transferWidth)
 530:Generated_Source\PSoC4/DMA.h **** {
 531:Generated_Source\PSoC4/DMA.h ****     CyDmaSetSrcDstTransferWidth(DMA_CHANNEL, descriptor, transferWidth);
 532:Generated_Source\PSoC4/DMA.h **** }
 533:Generated_Source\PSoC4/DMA.h **** 
 534:Generated_Source\PSoC4/DMA.h **** 
 535:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 536:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetSrcDstTransferWidth
 537:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 538:Generated_Source\PSoC4/DMA.h **** *
 539:Generated_Source\PSoC4/DMA.h **** * Summary:
 540:Generated_Source\PSoC4/DMA.h **** *  Returns the width of the source and destination, as set by 
 541:Generated_Source\PSoC4/DMA.h **** *  DMA_SetSrcDstTransferWidth() or DMA_SetConfiguration().
 542:Generated_Source\PSoC4/DMA.h **** *
 543:Generated_Source\PSoC4/DMA.h **** * Parameters:
 544:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 545:Generated_Source\PSoC4/DMA.h **** *                   
 546:Generated_Source\PSoC4/DMA.h **** * Return:
 547:Generated_Source\PSoC4/DMA.h **** *  Width of source and destination. Refer to the API bit field definitions in
 548:Generated_Source\PSoC4/DMA.h **** *  CyDMA_P4.h or the API description in the DMA channel datasheet for more
 549:Generated_Source\PSoC4/DMA.h **** *  information.
 550:Generated_Source\PSoC4/DMA.h **** *
 551:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 552:Generated_Source\PSoC4/DMA.h **** static CY_INLINE uint32 DMA_GetSrcDstTransferWidth(int32 descriptor)
 553:Generated_Source\PSoC4/DMA.h **** {
 554:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetSrcDstTransferWidth(DMA_CHANNEL, descriptor));
 555:Generated_Source\PSoC4/DMA.h **** }
 556:Generated_Source\PSoC4/DMA.h **** 
 557:Generated_Source\PSoC4/DMA.h **** 
 558:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 559:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetAddressIncrement
 560:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 561:Generated_Source\PSoC4/DMA.h **** *
 562:Generated_Source\PSoC4/DMA.h **** * Summary:
 563:Generated_Source\PSoC4/DMA.h **** *  Sets whether the source or destination addresses are incremented after the
 564:Generated_Source\PSoC4/DMA.h **** *  transfer of each data element. The amount that the source and destination
 565:Generated_Source\PSoC4/DMA.h **** *  address are incremented is determined by the DMA_SetSrcDstTransferWidth()
 566:Generated_Source\PSoC4/DMA.h **** *  function. The addresses will either be incremented by the data element size
 567:Generated_Source\PSoC4/DMA.h **** *  or by a word (4 bytes).
 568:Generated_Source\PSoC4/DMA.h **** *
 569:Generated_Source\PSoC4/DMA.h **** * Parameters:
 570:Generated_Source\PSoC4/DMA.h **** *  descriptor:       Descriptor (0 or 1) modified by this function.
 571:Generated_Source\PSoC4/DMA.h **** *  addressIncrement: Address increment settings. Refer to the API bit field
 572:Generated_Source\PSoC4/DMA.h **** *                    definitions in CyDMA_P4.h or the API description in the DMA
 573:Generated_Source\PSoC4/DMA.h **** *                    channel datasheet for the parameter options.
 574:Generated_Source\PSoC4/DMA.h **** *    
 575:Generated_Source\PSoC4/DMA.h **** * Return:
 576:Generated_Source\PSoC4/DMA.h **** *  None.
 577:Generated_Source\PSoC4/DMA.h **** *
 578:Generated_Source\PSoC4/DMA.h **** * Side effect:
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 13


 579:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 580:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 581:Generated_Source\PSoC4/DMA.h **** *
 582:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 583:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetAddressIncrement(int32 descriptor, uint32 addressIncrement)
 584:Generated_Source\PSoC4/DMA.h **** {
 585:Generated_Source\PSoC4/DMA.h ****     CyDmaSetAddressIncrement(DMA_CHANNEL, descriptor, addressIncrement);
 586:Generated_Source\PSoC4/DMA.h **** }
 587:Generated_Source\PSoC4/DMA.h **** 
 588:Generated_Source\PSoC4/DMA.h **** 
 589:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 590:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetAddressIncrement
 591:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 592:Generated_Source\PSoC4/DMA.h **** *
 593:Generated_Source\PSoC4/DMA.h **** * Summary:
 594:Generated_Source\PSoC4/DMA.h **** *  Returns address increment settings as set by DMA_SetAddressIncrement()
 595:Generated_Source\PSoC4/DMA.h **** *  or DMA_SetConfiguration().
 596:Generated_Source\PSoC4/DMA.h **** *
 597:Generated_Source\PSoC4/DMA.h **** * Parameters:
 598:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 599:Generated_Source\PSoC4/DMA.h **** *                   
 600:Generated_Source\PSoC4/DMA.h **** * Return:
 601:Generated_Source\PSoC4/DMA.h **** *  Address increment settings. Refer to the API bit field definitions in
 602:Generated_Source\PSoC4/DMA.h **** *  CyDMA_P4.h or the API description in the DMA channel datasheet for more
 603:Generated_Source\PSoC4/DMA.h **** *  information.
 604:Generated_Source\PSoC4/DMA.h **** *
 605:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 606:Generated_Source\PSoC4/DMA.h **** static CY_INLINE uint32 DMA_GetAddressIncrement(int32 descriptor)
 607:Generated_Source\PSoC4/DMA.h **** {
 608:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetAddressIncrement(DMA_CHANNEL, descriptor));
 609:Generated_Source\PSoC4/DMA.h **** }
 610:Generated_Source\PSoC4/DMA.h **** 
 611:Generated_Source\PSoC4/DMA.h **** 
 612:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 613:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetTriggerType
 614:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 615:Generated_Source\PSoC4/DMA.h **** *
 616:Generated_Source\PSoC4/DMA.h **** * Summary:
 617:Generated_Source\PSoC4/DMA.h **** *  Sets the type of input trigger for the DMA For level sensitive triggers sets
 618:Generated_Source\PSoC4/DMA.h **** *  how long the DMA waits for the trigger to go low (deactivate) before
 619:Generated_Source\PSoC4/DMA.h **** *  triggering the channel again.
 620:Generated_Source\PSoC4/DMA.h **** *
 621:Generated_Source\PSoC4/DMA.h **** * Parameters:
 622:Generated_Source\PSoC4/DMA.h **** *  descriptor:  Descriptor (0 or 1) modified by this function.
 623:Generated_Source\PSoC4/DMA.h **** *  triggerType: Type of DMA trigger. Refer to the API bit field definitions in
 624:Generated_Source\PSoC4/DMA.h **** *               CyDMA_P4.h or the API description in the DMA channel datasheet
 625:Generated_Source\PSoC4/DMA.h **** *               for the parameter options.
 626:Generated_Source\PSoC4/DMA.h **** *                   
 627:Generated_Source\PSoC4/DMA.h **** * Return:
 628:Generated_Source\PSoC4/DMA.h **** *  None.
 629:Generated_Source\PSoC4/DMA.h **** *
 630:Generated_Source\PSoC4/DMA.h **** * Side effect:
 631:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 632:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 633:Generated_Source\PSoC4/DMA.h **** *
 634:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 635:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetTriggerType(int32 descriptor, uint32 triggerType)
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 14


 636:Generated_Source\PSoC4/DMA.h **** {
 637:Generated_Source\PSoC4/DMA.h ****     CyDmaSetTriggerType(DMA_CHANNEL, descriptor, triggerType);
 638:Generated_Source\PSoC4/DMA.h **** }
 639:Generated_Source\PSoC4/DMA.h **** 
 640:Generated_Source\PSoC4/DMA.h **** 
 641:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 642:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetTriggerType
 643:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 644:Generated_Source\PSoC4/DMA.h **** *
 645:Generated_Source\PSoC4/DMA.h **** * Summary:
 646:Generated_Source\PSoC4/DMA.h **** *  Returns the trigger deactivation settings as set by DMA_SetTriggerType()
 647:Generated_Source\PSoC4/DMA.h **** *  or DMA_SetConfiguration().
 648:Generated_Source\PSoC4/DMA.h **** *
 649:Generated_Source\PSoC4/DMA.h **** * Parameters:
 650:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 651:Generated_Source\PSoC4/DMA.h **** *                   
 652:Generated_Source\PSoC4/DMA.h **** * Return:
 653:Generated_Source\PSoC4/DMA.h **** *  Trigger deactivation settings. Refer to the API bit field definitions in
 654:Generated_Source\PSoC4/DMA.h **** *  CyDMA_P4.h or the API description in the DMA channel datasheet for more
 655:Generated_Source\PSoC4/DMA.h **** *  information.
 656:Generated_Source\PSoC4/DMA.h **** *
 657:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 658:Generated_Source\PSoC4/DMA.h **** static CY_INLINE uint32 DMA_GetTriggerType(int32 descriptor)
 659:Generated_Source\PSoC4/DMA.h **** {
 660:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetTriggerType(DMA_CHANNEL, descriptor));
 661:Generated_Source\PSoC4/DMA.h **** }
 662:Generated_Source\PSoC4/DMA.h **** 
 663:Generated_Source\PSoC4/DMA.h **** 
 664:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 665:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetTransferMode
 666:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 667:Generated_Source\PSoC4/DMA.h **** *
 668:Generated_Source\PSoC4/DMA.h **** * Summary:
 669:Generated_Source\PSoC4/DMA.h **** *  Sets the DMA transfer mode. This determines how the DMA reacts to each trigger
 670:Generated_Source\PSoC4/DMA.h **** *  event.
 671:Generated_Source\PSoC4/DMA.h **** *
 672:Generated_Source\PSoC4/DMA.h **** * Parameters:
 673:Generated_Source\PSoC4/DMA.h **** *  descriptor:   Descriptor (0 or 1) modified by this function.
 674:Generated_Source\PSoC4/DMA.h **** *  transferMode: Specifies the DMA transfer mode settings. Refer to the API bit
 675:Generated_Source\PSoC4/DMA.h **** *                field definitions in CyDMA_P4.h or the API description in the
 676:Generated_Source\PSoC4/DMA.h **** *                DMA channel datasheet for the parameter options.
 677:Generated_Source\PSoC4/DMA.h **** *                   
 678:Generated_Source\PSoC4/DMA.h **** * Return:
 679:Generated_Source\PSoC4/DMA.h **** *  None.
 680:Generated_Source\PSoC4/DMA.h **** *
 681:Generated_Source\PSoC4/DMA.h **** * Side effect:
 682:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 683:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 684:Generated_Source\PSoC4/DMA.h **** *
 685:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 686:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetTransferMode(int32 descriptor, uint32 transferMode)
 687:Generated_Source\PSoC4/DMA.h **** {
 688:Generated_Source\PSoC4/DMA.h ****     CyDmaSetTransferMode(DMA_CHANNEL, descriptor, transferMode);
 689:Generated_Source\PSoC4/DMA.h **** }
 690:Generated_Source\PSoC4/DMA.h **** 
 691:Generated_Source\PSoC4/DMA.h **** 
 692:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 15


 693:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetTransferMode
 694:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 695:Generated_Source\PSoC4/DMA.h **** *
 696:Generated_Source\PSoC4/DMA.h **** * Summary:
 697:Generated_Source\PSoC4/DMA.h **** *  Returns the transfer mode for the specified descriptor as set by 
 698:Generated_Source\PSoC4/DMA.h **** *  DMA_SetTransferMode() or DMA_SetConfiguration().
 699:Generated_Source\PSoC4/DMA.h **** *
 700:Generated_Source\PSoC4/DMA.h **** * Parameters:
 701:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 702:Generated_Source\PSoC4/DMA.h **** *                   
 703:Generated_Source\PSoC4/DMA.h **** * Return:
 704:Generated_Source\PSoC4/DMA.h **** *  DMA transfer mode settings. Refer to the API bit field definitions in
 705:Generated_Source\PSoC4/DMA.h **** *  CyDMA_P4.h or the API description in the DMA channel datasheet for more
 706:Generated_Source\PSoC4/DMA.h **** *  information.
 707:Generated_Source\PSoC4/DMA.h **** *
 708:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 709:Generated_Source\PSoC4/DMA.h **** static CY_INLINE uint32 DMA_GetTransferMode(int32 descriptor)
 710:Generated_Source\PSoC4/DMA.h **** {
 711:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetTransferMode(DMA_CHANNEL, descriptor));
 712:Generated_Source\PSoC4/DMA.h **** }
 713:Generated_Source\PSoC4/DMA.h **** 
 714:Generated_Source\PSoC4/DMA.h **** 
 715:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 716:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetPreemptable
 717:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 718:Generated_Source\PSoC4/DMA.h **** *
 719:Generated_Source\PSoC4/DMA.h **** * Summary:
 720:Generated_Source\PSoC4/DMA.h **** *  Determines if the descriptor is preemptable.
 721:Generated_Source\PSoC4/DMA.h **** *
 722:Generated_Source\PSoC4/DMA.h **** * Parameters:
 723:Generated_Source\PSoC4/DMA.h **** *  descriptor:  Descriptor (0 or 1) modified by this function.
 724:Generated_Source\PSoC4/DMA.h **** *  preemptable: Descriptor preemption settings. Refer to the API bit field
 725:Generated_Source\PSoC4/DMA.h **** *               definitions in CyDMA_P4.h or the API description in the DMA 
 726:Generated_Source\PSoC4/DMA.h **** *               channel datasheet for the parameter options.
 727:Generated_Source\PSoC4/DMA.h **** *                   
 728:Generated_Source\PSoC4/DMA.h **** * Return:
 729:Generated_Source\PSoC4/DMA.h **** *  None.
 730:Generated_Source\PSoC4/DMA.h **** *
 731:Generated_Source\PSoC4/DMA.h **** * Side effect:
 732:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 733:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 734:Generated_Source\PSoC4/DMA.h **** *
 735:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 736:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetPreemptable(int32 descriptor, uint32 preemptable)
 737:Generated_Source\PSoC4/DMA.h **** {
 738:Generated_Source\PSoC4/DMA.h ****     CyDmaSetPreemptable(DMA_CHANNEL, descriptor, preemptable);
 739:Generated_Source\PSoC4/DMA.h **** }
 740:Generated_Source\PSoC4/DMA.h **** 
 741:Generated_Source\PSoC4/DMA.h **** 
 742:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 743:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetPreemptable
 744:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 745:Generated_Source\PSoC4/DMA.h **** *
 746:Generated_Source\PSoC4/DMA.h **** * Summary:
 747:Generated_Source\PSoC4/DMA.h **** *  Returns whether or not the descriptor is preemptable.
 748:Generated_Source\PSoC4/DMA.h **** *
 749:Generated_Source\PSoC4/DMA.h **** * Parameters:
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 16


 750:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 751:Generated_Source\PSoC4/DMA.h **** *                   
 752:Generated_Source\PSoC4/DMA.h **** * Return:
 753:Generated_Source\PSoC4/DMA.h **** *  Descriptor preemption setting. Refer to the API bit field definitions in
 754:Generated_Source\PSoC4/DMA.h **** *  CyDMA_P4.h or the API description in the DMA channel datasheet for more
 755:Generated_Source\PSoC4/DMA.h **** *  information.
 756:Generated_Source\PSoC4/DMA.h **** *
 757:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 758:Generated_Source\PSoC4/DMA.h **** static CY_INLINE uint32 DMA_GetPreemptable(int32 descriptor)
 759:Generated_Source\PSoC4/DMA.h **** {
 760:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetPreemptable(DMA_CHANNEL, descriptor));
 761:Generated_Source\PSoC4/DMA.h **** }
 762:Generated_Source\PSoC4/DMA.h **** 
 763:Generated_Source\PSoC4/DMA.h **** 
 764:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 765:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetPostCompletionActions
 766:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 767:Generated_Source\PSoC4/DMA.h **** *
 768:Generated_Source\PSoC4/DMA.h **** * Summary:
 769:Generated_Source\PSoC4/DMA.h **** *  Determines what occurs after a descriptor completes.
 770:Generated_Source\PSoC4/DMA.h **** *
 771:Generated_Source\PSoC4/DMA.h **** * Parameters:
 772:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 773:Generated_Source\PSoC4/DMA.h **** *  actions:    Specifies descriptor post completion actions. Refer to the API
 774:Generated_Source\PSoC4/DMA.h **** *              bit field definitions in CyDMA_P4.h or the API description in the
 775:Generated_Source\PSoC4/DMA.h **** *              DMA channel datasheet for the parameter options.
 776:Generated_Source\PSoC4/DMA.h **** *                   
 777:Generated_Source\PSoC4/DMA.h **** * Return:
 778:Generated_Source\PSoC4/DMA.h **** *  None.  
 779:Generated_Source\PSoC4/DMA.h **** *
 780:Generated_Source\PSoC4/DMA.h **** * Side effect:
 781:Generated_Source\PSoC4/DMA.h **** *  This function should not be called when the specified descriptor is active
 782:Generated_Source\PSoC4/DMA.h **** *  in the DMA transfer engine. This can be checked by calling CyDmaGetStatus(). 
 783:Generated_Source\PSoC4/DMA.h **** *
 784:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 785:Generated_Source\PSoC4/DMA.h **** static CY_INLINE void DMA_SetPostCompletionActions(int32 descriptor, uint32 actions)
 786:Generated_Source\PSoC4/DMA.h **** {
 787:Generated_Source\PSoC4/DMA.h ****     CyDmaSetPostCompletionActions(DMA_CHANNEL, descriptor, actions);
 788:Generated_Source\PSoC4/DMA.h **** }
 789:Generated_Source\PSoC4/DMA.h **** 
 790:Generated_Source\PSoC4/DMA.h **** 
 791:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 792:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_GetPostCompletionAction
 793:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 794:Generated_Source\PSoC4/DMA.h **** *
 795:Generated_Source\PSoC4/DMA.h **** * Summary:
 796:Generated_Source\PSoC4/DMA.h **** *  Returns the post descriptor action settings as set by 
 797:Generated_Source\PSoC4/DMA.h **** *  DMA_SetPostCompletionActions() or DMA_SetConfiguration().
 798:Generated_Source\PSoC4/DMA.h **** *
 799:Generated_Source\PSoC4/DMA.h **** * Parameters:
 800:Generated_Source\PSoC4/DMA.h **** *  descriptor: Descriptor (0 or 1) modified by this function.
 801:Generated_Source\PSoC4/DMA.h **** *                   
 802:Generated_Source\PSoC4/DMA.h **** * Return:
 803:Generated_Source\PSoC4/DMA.h **** *  Post descriptor actions. Refer to the API bit field definitions in CyDMA_P4.h
 804:Generated_Source\PSoC4/DMA.h **** *  or the API description in the DMA channel datasheet for more information.
 805:Generated_Source\PSoC4/DMA.h **** *
 806:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 17


 807:Generated_Source\PSoC4/DMA.h **** static CY_INLINE uint32 DMA_GetPostCompletionAction(int32 descriptor)
 808:Generated_Source\PSoC4/DMA.h **** {
 809:Generated_Source\PSoC4/DMA.h ****     return (CyDmaGetPostCompletionActions(DMA_CHANNEL, descriptor));
 810:Generated_Source\PSoC4/DMA.h **** }
 811:Generated_Source\PSoC4/DMA.h **** 
 812:Generated_Source\PSoC4/DMA.h **** 
 813:Generated_Source\PSoC4/DMA.h **** /*******************************************************************************
 814:Generated_Source\PSoC4/DMA.h **** * Function Name: DMA_SetInterruptCallback
 815:Generated_Source\PSoC4/DMA.h **** ********************************************************************************
 816:Generated_Source\PSoC4/DMA.h **** *
 817:Generated_Source\PSoC4/DMA.h **** * Summary:
 818:Generated_Source\PSoC4/DMA.h **** *  Sets a user defined callback function to be called by the DMA interrupt. The
 819:Generated_Source\PSoC4/DMA.h **** *  function should contain code to process the interrupt request for the 
 820:Generated_Source\PSoC4/DMA.h **** *  associated DMA channel.
 821:Generated_Source\PSoC4/DMA.h **** *
 822:Generated_Source\PSoC4/DMA.h **** * Parameters:
 823:Generated_Source\PSoC4/DMA.h **** *  callback: Pointer to the user defined callback function.
 824:Generated_Source\PSoC4/DMA.h **** *
 825:Generated_Source\PSoC4/DMA.h **** * Return:
 826:Generated_Source\PSoC4/DMA.h **** *  Pointer to the function previously set for the specified channel. 
 827:Generated_Source\PSoC4/DMA.h **** *
 828:Generated_Source\PSoC4/DMA.h **** *******************************************************************************/
 829:Generated_Source\PSoC4/DMA.h **** static CY_INLINE cydma_callback_t DMA_SetInterruptCallback(cydma_callback_t callback)
 830:Generated_Source\PSoC4/DMA.h **** {
 831:Generated_Source\PSoC4/DMA.h ****     return (CyDmaSetInterruptCallback(DMA_CHANNEL, callback));
  66              		.loc 2 831 0
  67 000e 0549     		ldr	r1, .L3+8
  68 0010 0220     		movs	r0, #2
  69 0012 FFF7FEFF 		bl	CyDmaSetInterruptCallback
  70              	.LVL2:
  71              	.LBE5:
  72              	.LBE4:
  42:VolumeControl.c ****     
  43:VolumeControl.c ****     DMA_SetInterruptCallback(DmaIntHandler);
  44:VolumeControl.c **** 
  45:VolumeControl.c ****     /* Start ADC conversion. */
  46:VolumeControl.c ****     ADC_StartConvert();
  73              		.loc 1 46 0
  74 0016 FFF7FEFF 		bl	ADC_StartConvert
  75              	.LVL3:
  47:VolumeControl.c **** }
  76              		.loc 1 47 0
  77              		@ sp needed
  78 001a 10BD     		pop	{r4, pc}
  79              	.L4:
  80              		.align	2
  81              	.L3:
  82 001c 00000000 		.word	.LANCHOR0
  83 0020 80013A40 		.word	1077543296
  84 0024 00000000 		.word	DmaIntHandler
  85              		.cfi_endproc
  86              	.LFE35:
  87              		.size	VolumeControlInit, .-VolumeControlInit
  88              		.global	__aeabi_idiv
  89              		.section	.text.VolumeControlService,"ax",%progbits
  90              		.align	2
  91              		.global	VolumeControlService
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 18


  92              		.code	16
  93              		.thumb_func
  94              		.type	VolumeControlService, %function
  95              	VolumeControlService:
  96              	.LFB36:
  48:VolumeControl.c **** 
  49:VolumeControl.c **** void VolumeControlService(void)
  50:VolumeControl.c **** {
  97              		.loc 1 50 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 102              		.cfi_def_cfa_offset 20
 103              		.cfi_offset 4, -20
 104              		.cfi_offset 5, -16
 105              		.cfi_offset 6, -12
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
 108 0002 83B0     		sub	sp, sp, #12
 109              		.cfi_def_cfa_offset 32
 110              	.LVL4:
  51:VolumeControl.c ****     static int32 prevVol[vol_ctrl_both] = { 0, 0 };
  52:VolumeControl.c ****     int32 volume[vol_ctrl_both] = { 0, 0 };
  53:VolumeControl.c ****     int i;
  54:VolumeControl.c **** 
  55:VolumeControl.c ****     for (i = 0; i < vol_ctrl_both; i++)
 111              		.loc 1 55 0
 112 0004 0024     		movs	r4, #0
 113 0006 45E0     		b	.L6
 114              	.LVL5:
 115              	.L13:
  56:VolumeControl.c **** 	{
  57:VolumeControl.c ****         // Scale ADC reading to USBFS volume range
  58:VolumeControl.c ****         volume[i] = (adcSample[i] - ADC_MIN_READING[i]) * PC_VOLUME_MSB_MAX / ADC_READING_RANGE(i);
 116              		.loc 1 58 0
 117 0008 244E     		ldr	r6, .L15
 118 000a 6300     		lsls	r3, r4, #1
 119 000c 9A5F     		ldrsh	r2, [r3, r6]
 120 000e 244B     		ldr	r3, .L15+4
 121 0010 A500     		lsls	r5, r4, #2
 122 0012 E958     		ldr	r1, [r5, r3]
 123 0014 521A     		subs	r2, r2, r1
 124 0016 D001     		lsls	r0, r2, #7
 125 0018 801A     		subs	r0, r0, r2
 126 001a 5B19     		adds	r3, r3, r5
 127 001c 9B68     		ldr	r3, [r3, #8]
 128 001e 591A     		subs	r1, r3, r1
 129 0020 FFF7FEFF 		bl	__aeabi_idiv
 130              	.LVL6:
 131 0024 0700     		movs	r7, r0
  59:VolumeControl.c **** 
  60:VolumeControl.c ****         #if 0
  61:VolumeControl.c ****         /* Filter volume to be in the expected range */
  62:VolumeControl.c **** 		if((volume[i] > PC_VOLUME_MSB_MIN) && (volume[i] <= PC_VOLUME_MSB_MAX))
  63:VolumeControl.c **** 		{
  64:VolumeControl.c **** 			volume[i] = (uint8)(((volume[i] - PC_VOLUME_MSB_MIN) * CODEC_HP_VOLUME_MAX) / (PC_VOLUME_MSB_MAX
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 19


  65:VolumeControl.c **** 		}
  66:VolumeControl.c **** 		else
  67:VolumeControl.c **** 		{
  68:VolumeControl.c **** 			/* Set volume to 0 if the volume from PC is not in expected range */
  69:VolumeControl.c **** 			volume[i] = 0;
  70:VolumeControl.c **** 		}
  71:VolumeControl.c ****         #endif
  72:VolumeControl.c **** 
  73:VolumeControl.c ****         if (volume[i] != prevVol[i])
 132              		.loc 1 73 0
 133 0026 7519     		adds	r5, r6, r5
 134 0028 6B68     		ldr	r3, [r5, #4]
 135 002a 9842     		cmp	r0, r3
 136 002c 31D0     		beq	.L7
  74:VolumeControl.c ****         {
  75:VolumeControl.c ****             /* Update the codec volume */
  76:VolumeControl.c ****             D_PRINTF(DEBUG, "%s volume knob change %ld -> %ld\n", (i == vol_ctrl_right) ? "Right" :
 137              		.loc 1 76 0
 138 002e 1D4B     		ldr	r3, .L15+8
 139 0030 1B68     		ldr	r3, [r3]
 140 0032 002B     		cmp	r3, #0
 141 0034 24D0     		beq	.L8
 142              		.loc 1 76 0 is_stmt 0 discriminator 1
 143 0036 5B7C     		ldrb	r3, [r3, #17]
 144 0038 9B07     		lsls	r3, r3, #30
 145 003a 21D0     		beq	.L8
 146              		.loc 1 76 0 discriminator 2
 147 003c FFF7FEFF 		bl	USBUART_GetConfiguration
 148              	.LVL7:
 149 0040 0028     		cmp	r0, #0
 150 0042 1DD0     		beq	.L8
 151              	.LBB6:
 152              		.loc 1 76 0 discriminator 3
 153 0044 184B     		ldr	r3, .L15+12
 154 0046 1D68     		ldr	r5, [r3]
 155              	.LVL8:
 156              	.L10:
 157              		.loc 1 76 0 discriminator 7
 158 0048 FFF7FEFF 		bl	USBUART_CDCIsReady
 159              	.LVL9:
 160 004c 0028     		cmp	r0, #0
 161 004e 05D1     		bne	.L9
 162              		.loc 1 76 0 discriminator 5
 163 0050 154B     		ldr	r3, .L15+12
 164 0052 1B68     		ldr	r3, [r3]
 165 0054 5B1B     		subs	r3, r3, r5
 166 0056 154A     		ldr	r2, .L15+16
 167 0058 9342     		cmp	r3, r2
 168 005a F5D9     		bls	.L10
 169              	.L9:
 170              		.loc 1 76 0 discriminator 8
 171 005c 002C     		cmp	r4, #0
 172 005e 01D1     		bne	.L14
 173              		.loc 1 76 0
 174 0060 134A     		ldr	r2, .L15+20
 175 0062 00E0     		b	.L11
 176              	.L14:
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 20


 177 0064 134A     		ldr	r2, .L15+24
 178              	.L11:
 179              		.loc 1 76 0 discriminator 12
 180 0066 A300     		lsls	r3, r4, #2
 181 0068 0C49     		ldr	r1, .L15
 182 006a CB18     		adds	r3, r1, r3
 183 006c 5B68     		ldr	r3, [r3, #4]
 184 006e 124D     		ldr	r5, .L15+28
 185              	.LVL10:
 186 0070 0097     		str	r7, [sp]
 187 0072 1249     		ldr	r1, .L15+32
 188 0074 2800     		movs	r0, r5
 189 0076 FFF7FEFF 		bl	sprintf
 190              	.LVL11:
 191 007a 2800     		movs	r0, r5
 192 007c FFF7FEFF 		bl	USBUART_PutString
 193              	.LVL12:
 194              	.L8:
 195              	.LBE6:
  77:VolumeControl.c ****             
  78:VolumeControl.c ****             if (i == vol_ctrl_right)
 196              		.loc 1 78 0 is_stmt 1
 197 0080 002C     		cmp	r4, #0
 198 0082 02D1     		bne	.L12
  79:VolumeControl.c ****             {
  80:VolumeControl.c ****     		    Codec_AdjustBothHeadphoneVolumeLevel(volume[i]);
 199              		.loc 1 80 0
 200 0084 F8B2     		uxtb	r0, r7
 201 0086 FFF7FEFF 		bl	Codec_AdjustBothHeadphoneVolumeLevel
 202              	.LVL13:
 203              	.L12:
  81:VolumeControl.c ****             }
  82:VolumeControl.c ****             else
  83:VolumeControl.c ****             {
  84:VolumeControl.c ****             }
  85:VolumeControl.c ****             prevVol[i] = volume[i];
 204              		.loc 1 85 0
 205 008a A300     		lsls	r3, r4, #2
 206 008c 034A     		ldr	r2, .L15
 207 008e D318     		adds	r3, r2, r3
 208 0090 5F60     		str	r7, [r3, #4]
 209              	.L7:
  55:VolumeControl.c **** 	{
 210              		.loc 1 55 0 discriminator 2
 211 0092 0134     		adds	r4, r4, #1
 212              	.LVL14:
 213              	.L6:
  55:VolumeControl.c **** 	{
 214              		.loc 1 55 0 is_stmt 0 discriminator 1
 215 0094 012C     		cmp	r4, #1
 216 0096 B7DD     		ble	.L13
  86:VolumeControl.c ****         }
  87:VolumeControl.c ****     }
  88:VolumeControl.c **** }
 217              		.loc 1 88 0 is_stmt 1
 218 0098 03B0     		add	sp, sp, #12
 219              		@ sp needed
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 21


 220              	.LVL15:
 221 009a F0BD     		pop	{r4, r5, r6, r7, pc}
 222              	.L16:
 223              		.align	2
 224              	.L15:
 225 009c 00000000 		.word	.LANCHOR0
 226 00a0 00000000 		.word	.LANCHOR1
 227 00a4 00000000 		.word	cal_data
 228 00a8 00000000 		.word	tmrCounter_ms
 229 00ac E7030000 		.word	999
 230 00b0 00000000 		.word	.LC2
 231 00b4 08000000 		.word	.LC4
 232 00b8 00000000 		.word	gbuf
 233 00bc 10000000 		.word	.LC10
 234              		.cfi_endproc
 235              	.LFE36:
 236              		.size	VolumeControlService, .-VolumeControlService
 237              		.global	adcSample
 238              		.global	ADC_MAX_READING
 239              		.global	ADC_MIN_READING
 240              		.data
 241              		.align	2
 242              		.set	.LANCHOR1,. + 0
 243              		.type	ADC_MIN_READING, %object
 244              		.size	ADC_MIN_READING, 8
 245              	ADC_MIN_READING:
 246 0000 FEFFFFFF 		.word	-2
 247 0004 FEFFFFFF 		.word	-2
 248              		.type	ADC_MAX_READING, %object
 249              		.size	ADC_MAX_READING, 8
 250              	ADC_MAX_READING:
 251 0008 FF070000 		.word	2047
 252 000c FF070000 		.word	2047
 253              		.section	.rodata.str1.4,"aMS",%progbits,1
 254              		.align	2
 255              	.LC2:
 256 0000 52696768 		.ascii	"Right\000"
 256      7400
 257 0006 0000     		.space	2
 258              	.LC4:
 259 0008 4C656674 		.ascii	"Left\000"
 259      00
 260 000d 000000   		.space	3
 261              	.LC10:
 262 0010 25732076 		.ascii	"%s volume knob change %ld -> %ld\012\000"
 262      6F6C756D 
 262      65206B6E 
 262      6F622063 
 262      68616E67 
 263              		.bss
 264              		.align	2
 265              		.set	.LANCHOR0,. + 0
 266              		.type	adcSample, %object
 267              		.size	adcSample, 4
 268              	adcSample:
 269 0000 00000000 		.space	4
 270              		.type	prevVol.6962, %object
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 22


 271              		.size	prevVol.6962, 8
 272              	prevVol.6962:
 273 0004 00000000 		.space	8
 273      00000000 
 274              		.text
 275              	.Letext0:
 276              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 277              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 278              		.file 5 "Generated_Source\\PSoC4/cytypes.h"
 279              		.file 6 "./Calibration.h"
 280              		.file 7 "Generated_Source\\PSoC4/CyDMA.h"
 281              		.file 8 "./timers.h"
 282              		.file 9 "./Application.h"
 283              		.file 10 "Generated_Source\\PSoC4/ADC.h"
 284              		.file 11 "Generated_Source\\PSoC4/USBUART_cdc.h"
 285              		.file 12 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4
 286              		.file 13 "Generated_Source\\PSoC4/USBUART.h"
 287              		.file 14 "./Codec.h"
 288              		.file 15 "VolumeControl.h"
 289              		.section	.debug_info,"",%progbits
 290              	.Ldebug_info0:
 291 0000 BA030000 		.4byte	0x3ba
 292 0004 0400     		.2byte	0x4
 293 0006 00000000 		.4byte	.Ldebug_abbrev0
 294 000a 04       		.byte	0x4
 295 000b 01       		.uleb128 0x1
 296 000c 2C020000 		.4byte	.LASF50
 297 0010 0C       		.byte	0xc
 298 0011 14000000 		.4byte	.LASF51
 299 0015 13010000 		.4byte	.LASF52
 300 0019 00000000 		.4byte	.Ldebug_ranges0+0
 301 001d 00000000 		.4byte	0
 302 0021 00000000 		.4byte	.Ldebug_line0
 303 0025 02       		.uleb128 0x2
 304 0026 01       		.byte	0x1
 305 0027 06       		.byte	0x6
 306 0028 51030000 		.4byte	.LASF0
 307 002c 02       		.uleb128 0x2
 308 002d 01       		.byte	0x1
 309 002e 08       		.byte	0x8
 310 002f C1000000 		.4byte	.LASF1
 311 0033 02       		.uleb128 0x2
 312 0034 02       		.byte	0x2
 313 0035 05       		.byte	0x5
 314 0036 88010000 		.4byte	.LASF2
 315 003a 02       		.uleb128 0x2
 316 003b 02       		.byte	0x2
 317 003c 07       		.byte	0x7
 318 003d 41000000 		.4byte	.LASF3
 319 0041 02       		.uleb128 0x2
 320 0042 04       		.byte	0x4
 321 0043 05       		.byte	0x5
 322 0044 33030000 		.4byte	.LASF4
 323 0048 03       		.uleb128 0x3
 324 0049 49010000 		.4byte	.LASF9
 325 004d 03       		.byte	0x3
 326 004e 41       		.byte	0x41
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 23


 327 004f 53000000 		.4byte	0x53
 328 0053 02       		.uleb128 0x2
 329 0054 04       		.byte	0x4
 330 0055 07       		.byte	0x7
 331 0056 C0010000 		.4byte	.LASF5
 332 005a 02       		.uleb128 0x2
 333 005b 08       		.byte	0x8
 334 005c 05       		.byte	0x5
 335 005d CF020000 		.4byte	.LASF6
 336 0061 02       		.uleb128 0x2
 337 0062 08       		.byte	0x8
 338 0063 07       		.byte	0x7
 339 0064 DF010000 		.4byte	.LASF7
 340 0068 04       		.uleb128 0x4
 341 0069 04       		.byte	0x4
 342 006a 05       		.byte	0x5
 343 006b 696E7400 		.ascii	"int\000"
 344 006f 02       		.uleb128 0x2
 345 0070 04       		.byte	0x4
 346 0071 07       		.byte	0x7
 347 0072 D2010000 		.4byte	.LASF8
 348 0076 03       		.uleb128 0x3
 349 0077 2A030000 		.4byte	.LASF10
 350 007b 04       		.byte	0x4
 351 007c 30       		.byte	0x30
 352 007d 48000000 		.4byte	0x48
 353 0081 05       		.uleb128 0x5
 354 0082 BB000000 		.4byte	.LASF11
 355 0086 05       		.byte	0x5
 356 0087 E401     		.2byte	0x1e4
 357 0089 2C000000 		.4byte	0x2c
 358 008d 05       		.uleb128 0x5
 359 008e B9010000 		.4byte	.LASF12
 360 0092 05       		.byte	0x5
 361 0093 E601     		.2byte	0x1e6
 362 0095 53000000 		.4byte	0x53
 363 0099 05       		.uleb128 0x5
 364 009a 0D010000 		.4byte	.LASF13
 365 009e 05       		.byte	0x5
 366 009f E801     		.2byte	0x1e8
 367 00a1 33000000 		.4byte	0x33
 368 00a5 05       		.uleb128 0x5
 369 00a6 3A010000 		.4byte	.LASF14
 370 00aa 05       		.byte	0x5
 371 00ab E901     		.2byte	0x1e9
 372 00ad 41000000 		.4byte	0x41
 373 00b1 02       		.uleb128 0x2
 374 00b2 04       		.byte	0x4
 375 00b3 04       		.byte	0x4
 376 00b4 AE000000 		.4byte	.LASF15
 377 00b8 02       		.uleb128 0x2
 378 00b9 08       		.byte	0x8
 379 00ba 04       		.byte	0x4
 380 00bb 66000000 		.4byte	.LASF16
 381 00bf 02       		.uleb128 0x2
 382 00c0 01       		.byte	0x1
 383 00c1 08       		.byte	0x8
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 24


 384 00c2 DD020000 		.4byte	.LASF17
 385 00c6 05       		.uleb128 0x5
 386 00c7 0E000000 		.4byte	.LASF18
 387 00cb 05       		.byte	0x5
 388 00cc 9002     		.2byte	0x290
 389 00ce D2000000 		.4byte	0xd2
 390 00d2 06       		.uleb128 0x6
 391 00d3 8D000000 		.4byte	0x8d
 392 00d7 07       		.uleb128 0x7
 393 00d8 04       		.byte	0x4
 394 00d9 DD000000 		.4byte	0xdd
 395 00dd 08       		.uleb128 0x8
 396 00de 02       		.uleb128 0x2
 397 00df 08       		.byte	0x8
 398 00e0 04       		.byte	0x4
 399 00e1 BA020000 		.4byte	.LASF19
 400 00e5 02       		.uleb128 0x2
 401 00e6 04       		.byte	0x4
 402 00e7 07       		.byte	0x7
 403 00e8 C6020000 		.4byte	.LASF20
 404 00ec 09       		.uleb128 0x9
 405 00ed 14       		.byte	0x14
 406 00ee 06       		.byte	0x6
 407 00ef 12       		.byte	0x12
 408 00f0 3D010000 		.4byte	0x13d
 409 00f4 0A       		.uleb128 0xa
 410 00f5 24000000 		.4byte	.LASF21
 411 00f9 06       		.byte	0x6
 412 00fa 14       		.byte	0x14
 413 00fb 8D000000 		.4byte	0x8d
 414 00ff 00       		.byte	0
 415 0100 0A       		.uleb128 0xa
 416 0101 67010000 		.4byte	.LASF22
 417 0105 06       		.byte	0x6
 418 0106 15       		.byte	0x15
 419 0107 8D000000 		.4byte	0x8d
 420 010b 04       		.byte	0x4
 421 010c 0A       		.uleb128 0xa
 422 010d E2020000 		.4byte	.LASF23
 423 0111 06       		.byte	0x6
 424 0112 16       		.byte	0x16
 425 0113 3D010000 		.4byte	0x13d
 426 0117 08       		.byte	0x8
 427 0118 0A       		.uleb128 0xa
 428 0119 F6010000 		.4byte	.LASF24
 429 011d 06       		.byte	0x6
 430 011e 17       		.byte	0x17
 431 011f 3D010000 		.4byte	0x13d
 432 0123 0C       		.byte	0xc
 433 0124 0A       		.uleb128 0xa
 434 0125 2E000000 		.4byte	.LASF25
 435 0129 06       		.byte	0x6
 436 012a 19       		.byte	0x19
 437 012b 81000000 		.4byte	0x81
 438 012f 10       		.byte	0x10
 439 0130 0A       		.uleb128 0xa
 440 0131 7D010000 		.4byte	.LASF26
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 25


 441 0135 06       		.byte	0x6
 442 0136 1A       		.byte	0x1a
 443 0137 81000000 		.4byte	0x81
 444 013b 11       		.byte	0x11
 445 013c 00       		.byte	0
 446 013d 0B       		.uleb128 0xb
 447 013e 99000000 		.4byte	0x99
 448 0142 4D010000 		.4byte	0x14d
 449 0146 0C       		.uleb128 0xc
 450 0147 E5000000 		.4byte	0xe5
 451 014b 01       		.byte	0x1
 452 014c 00       		.byte	0
 453 014d 03       		.uleb128 0x3
 454 014e 54010000 		.4byte	.LASF27
 455 0152 06       		.byte	0x6
 456 0153 1B       		.byte	0x1b
 457 0154 EC000000 		.4byte	0xec
 458 0158 0D       		.uleb128 0xd
 459 0159 01       		.byte	0x1
 460 015a 2C000000 		.4byte	0x2c
 461 015e 0F       		.byte	0xf
 462 015f 14       		.byte	0x14
 463 0160 77010000 		.4byte	0x177
 464 0164 0E       		.uleb128 0xe
 465 0165 04030000 		.4byte	.LASF28
 466 0169 00       		.byte	0
 467 016a 0E       		.uleb128 0xe
 468 016b 00000000 		.4byte	.LASF29
 469 016f 01       		.byte	0x1
 470 0170 0E       		.uleb128 0xe
 471 0171 6F010000 		.4byte	.LASF30
 472 0175 02       		.byte	0x2
 473 0176 00       		.byte	0
 474 0177 03       		.uleb128 0x3
 475 0178 1B020000 		.4byte	.LASF31
 476 017c 07       		.byte	0x7
 477 017d 67       		.byte	0x67
 478 017e D7000000 		.4byte	0xd7
 479 0182 0F       		.uleb128 0xf
 480 0183 CF000000 		.4byte	.LASF53
 481 0187 02       		.byte	0x2
 482 0188 3D03     		.2byte	0x33d
 483 018a 77010000 		.4byte	0x177
 484 018e 03       		.byte	0x3
 485 018f A0010000 		.4byte	0x1a0
 486 0193 10       		.uleb128 0x10
 487 0194 40010000 		.4byte	.LASF54
 488 0198 02       		.byte	0x2
 489 0199 3D03     		.2byte	0x33d
 490 019b 77010000 		.4byte	0x177
 491 019f 00       		.byte	0
 492 01a0 11       		.uleb128 0x11
 493 01a1 A0000000 		.4byte	.LASF55
 494 01a5 01       		.byte	0x1
 495 01a6 1C       		.byte	0x1c
 496 01a7 00000000 		.4byte	.LFB34
 497 01ab 02000000 		.4byte	.LFE34-.LFB34
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 26


 498 01af 01       		.uleb128 0x1
 499 01b0 9C       		.byte	0x9c
 500 01b1 12       		.uleb128 0x12
 501 01b2 13030000 		.4byte	.LASF32
 502 01b6 01       		.byte	0x1
 503 01b7 21       		.byte	0x21
 504 01b8 00000000 		.4byte	.LFB35
 505 01bc 28000000 		.4byte	.LFE35-.LFB35
 506 01c0 01       		.uleb128 0x1
 507 01c1 9C       		.byte	0x9c
 508 01c2 2E020000 		.4byte	0x22e
 509 01c6 13       		.uleb128 0x13
 510 01c7 82010000 		.4byte	0x182
 511 01cb 0E000000 		.4byte	.LBB4
 512 01cf 08000000 		.4byte	.LBE4-.LBB4
 513 01d3 01       		.byte	0x1
 514 01d4 2B       		.byte	0x2b
 515 01d5 FB010000 		.4byte	0x1fb
 516 01d9 14       		.uleb128 0x14
 517 01da 93010000 		.4byte	0x193
 518 01de 00000000 		.4byte	.LLST0
 519 01e2 15       		.uleb128 0x15
 520 01e3 16000000 		.4byte	.LVL2
 521 01e7 59030000 		.4byte	0x359
 522 01eb 16       		.uleb128 0x16
 523 01ec 01       		.uleb128 0x1
 524 01ed 50       		.byte	0x50
 525 01ee 01       		.uleb128 0x1
 526 01ef 32       		.byte	0x32
 527 01f0 16       		.uleb128 0x16
 528 01f1 01       		.uleb128 0x1
 529 01f2 51       		.byte	0x51
 530 01f3 05       		.uleb128 0x5
 531 01f4 03       		.byte	0x3
 532 01f5 00000000 		.4byte	DmaIntHandler
 533 01f9 00       		.byte	0
 534 01fa 00       		.byte	0
 535 01fb 17       		.uleb128 0x17
 536 01fc 06000000 		.4byte	.LVL0
 537 0200 64030000 		.4byte	0x364
 538 0204 18       		.uleb128 0x18
 539 0205 0E000000 		.4byte	.LVL1
 540 0209 6F030000 		.4byte	0x36f
 541 020d 24020000 		.4byte	0x224
 542 0211 16       		.uleb128 0x16
 543 0212 01       		.uleb128 0x1
 544 0213 50       		.byte	0x50
 545 0214 05       		.uleb128 0x5
 546 0215 0C       		.byte	0xc
 547 0216 80013A40 		.4byte	0x403a0180
 548 021a 16       		.uleb128 0x16
 549 021b 01       		.uleb128 0x1
 550 021c 51       		.byte	0x51
 551 021d 05       		.uleb128 0x5
 552 021e 03       		.byte	0x3
 553 021f 00000000 		.4byte	.LANCHOR0
 554 0223 00       		.byte	0
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 27


 555 0224 17       		.uleb128 0x17
 556 0225 1A000000 		.4byte	.LVL3
 557 0229 7A030000 		.4byte	0x37a
 558 022d 00       		.byte	0
 559 022e 19       		.uleb128 0x19
 560 022f 3C030000 		.4byte	.LASF33
 561 0233 01       		.byte	0x1
 562 0234 31       		.byte	0x31
 563 0235 00000000 		.4byte	.LFB36
 564 0239 C0000000 		.4byte	.LFE36-.LFB36
 565 023d 01       		.uleb128 0x1
 566 023e 9C       		.byte	0x9c
 567 023f DF020000 		.4byte	0x2df
 568 0243 1A       		.uleb128 0x1a
 569 0244 78030000 		.4byte	.LASF34
 570 0248 01       		.byte	0x1
 571 0249 33       		.byte	0x33
 572 024a DF020000 		.4byte	0x2df
 573 024e 05       		.uleb128 0x5
 574 024f 03       		.byte	0x3
 575 0250 04000000 		.4byte	prevVol.6962
 576 0254 1B       		.uleb128 0x1b
 577 0255 B4000000 		.4byte	.LASF56
 578 0259 01       		.byte	0x1
 579 025a 34       		.byte	0x34
 580 025b DF020000 		.4byte	0x2df
 581 025f 1C       		.uleb128 0x1c
 582 0260 6900     		.ascii	"i\000"
 583 0262 01       		.byte	0x1
 584 0263 35       		.byte	0x35
 585 0264 68000000 		.4byte	0x68
 586 0268 18000000 		.4byte	.LLST1
 587 026c 1D       		.uleb128 0x1d
 588 026d 44000000 		.4byte	.LBB6
 589 0271 3C000000 		.4byte	.LBE6-.LBB6
 590 0275 C5020000 		.4byte	0x2c5
 591 0279 1C       		.uleb128 0x1c
 592 027a 733100   		.ascii	"s1\000"
 593 027d 01       		.byte	0x1
 594 027e 4C       		.byte	0x4c
 595 027f 76000000 		.4byte	0x76
 596 0283 37000000 		.4byte	.LLST2
 597 0287 17       		.uleb128 0x17
 598 0288 4C000000 		.4byte	.LVL9
 599 028c 85030000 		.4byte	0x385
 600 0290 18       		.uleb128 0x18
 601 0291 7A000000 		.4byte	.LVL11
 602 0295 90030000 		.4byte	0x390
 603 0299 B4020000 		.4byte	0x2b4
 604 029d 16       		.uleb128 0x16
 605 029e 01       		.uleb128 0x1
 606 029f 50       		.byte	0x50
 607 02a0 02       		.uleb128 0x2
 608 02a1 75       		.byte	0x75
 609 02a2 00       		.sleb128 0
 610 02a3 16       		.uleb128 0x16
 611 02a4 01       		.uleb128 0x1
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 28


 612 02a5 51       		.byte	0x51
 613 02a6 05       		.uleb128 0x5
 614 02a7 03       		.byte	0x3
 615 02a8 10000000 		.4byte	.LC10
 616 02ac 16       		.uleb128 0x16
 617 02ad 02       		.uleb128 0x2
 618 02ae 7D       		.byte	0x7d
 619 02af 00       		.sleb128 0
 620 02b0 02       		.uleb128 0x2
 621 02b1 77       		.byte	0x77
 622 02b2 00       		.sleb128 0
 623 02b3 00       		.byte	0
 624 02b4 15       		.uleb128 0x15
 625 02b5 80000000 		.4byte	.LVL12
 626 02b9 9B030000 		.4byte	0x39b
 627 02bd 16       		.uleb128 0x16
 628 02be 01       		.uleb128 0x1
 629 02bf 50       		.byte	0x50
 630 02c0 02       		.uleb128 0x2
 631 02c1 75       		.byte	0x75
 632 02c2 00       		.sleb128 0
 633 02c3 00       		.byte	0
 634 02c4 00       		.byte	0
 635 02c5 17       		.uleb128 0x17
 636 02c6 40000000 		.4byte	.LVL7
 637 02ca A6030000 		.4byte	0x3a6
 638 02ce 15       		.uleb128 0x15
 639 02cf 8A000000 		.4byte	.LVL13
 640 02d3 B2030000 		.4byte	0x3b2
 641 02d7 16       		.uleb128 0x16
 642 02d8 01       		.uleb128 0x1
 643 02d9 50       		.byte	0x50
 644 02da 02       		.uleb128 0x2
 645 02db 77       		.byte	0x77
 646 02dc 00       		.sleb128 0
 647 02dd 00       		.byte	0
 648 02de 00       		.byte	0
 649 02df 0B       		.uleb128 0xb
 650 02e0 A5000000 		.4byte	0xa5
 651 02e4 EF020000 		.4byte	0x2ef
 652 02e8 0C       		.uleb128 0xc
 653 02e9 E5000000 		.4byte	0xe5
 654 02ed 01       		.byte	0x1
 655 02ee 00       		.byte	0
 656 02ef 1E       		.uleb128 0x1e
 657 02f0 B0010000 		.4byte	.LASF35
 658 02f4 06       		.byte	0x6
 659 02f5 1D       		.byte	0x1d
 660 02f6 FA020000 		.4byte	0x2fa
 661 02fa 07       		.uleb128 0x7
 662 02fb 04       		.byte	0x4
 663 02fc 4D010000 		.4byte	0x14d
 664 0300 1E       		.uleb128 0x1e
 665 0301 A2010000 		.4byte	.LASF36
 666 0305 08       		.byte	0x8
 667 0306 13       		.byte	0x13
 668 0307 0B030000 		.4byte	0x30b
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 29


 669 030b 06       		.uleb128 0x6
 670 030c 76000000 		.4byte	0x76
 671 0310 0B       		.uleb128 0xb
 672 0311 BF000000 		.4byte	0xbf
 673 0315 1B030000 		.4byte	0x31b
 674 0319 1F       		.uleb128 0x1f
 675 031a 00       		.byte	0
 676 031b 1E       		.uleb128 0x1e
 677 031c 25030000 		.4byte	.LASF37
 678 0320 09       		.byte	0x9
 679 0321 3C       		.byte	0x3c
 680 0322 10030000 		.4byte	0x310
 681 0326 20       		.uleb128 0x20
 682 0327 FA020000 		.4byte	.LASF38
 683 032b 01       		.byte	0x1
 684 032c 1A       		.byte	0x1a
 685 032d 3D010000 		.4byte	0x13d
 686 0331 05       		.uleb128 0x5
 687 0332 03       		.byte	0x3
 688 0333 00000000 		.4byte	adcSample
 689 0337 20       		.uleb128 0x20
 690 0338 EA020000 		.4byte	.LASF39
 691 033c 01       		.byte	0x1
 692 033d 14       		.byte	0x14
 693 033e DF020000 		.4byte	0x2df
 694 0342 05       		.uleb128 0x5
 695 0343 03       		.byte	0x3
 696 0344 00000000 		.4byte	ADC_MIN_READING
 697 0348 20       		.uleb128 0x20
 698 0349 92010000 		.4byte	.LASF40
 699 034d 01       		.byte	0x1
 700 034e 15       		.byte	0x15
 701 034f DF020000 		.4byte	0x2df
 702 0353 05       		.uleb128 0x5
 703 0354 03       		.byte	0x3
 704 0355 00000000 		.4byte	ADC_MAX_READING
 705 0359 21       		.uleb128 0x21
 706 035a 86000000 		.4byte	.LASF41
 707 035e 86000000 		.4byte	.LASF41
 708 0362 07       		.byte	0x7
 709 0363 7B       		.byte	0x7b
 710 0364 21       		.uleb128 0x21
 711 0365 11020000 		.4byte	.LASF42
 712 0369 11020000 		.4byte	.LASF42
 713 036d 0A       		.byte	0xa
 714 036e 99       		.byte	0x99
 715 036f 21       		.uleb128 0x21
 716 0370 5D030000 		.4byte	.LASF43
 717 0374 5D030000 		.4byte	.LASF43
 718 0378 02       		.byte	0x2
 719 0379 23       		.byte	0x23
 720 037a 21       		.uleb128 0x21
 721 037b 67030000 		.4byte	.LASF44
 722 037f 67030000 		.4byte	.LASF44
 723 0383 0A       		.byte	0xa
 724 0384 9D       		.byte	0x9d
 725 0385 21       		.uleb128 0x21
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 30


 726 0386 FE010000 		.4byte	.LASF45
 727 038a FE010000 		.4byte	.LASF45
 728 038e 0B       		.byte	0xb
 729 038f 28       		.byte	0x28
 730 0390 21       		.uleb128 0x21
 731 0391 80030000 		.4byte	.LASF46
 732 0395 80030000 		.4byte	.LASF46
 733 0399 0C       		.byte	0xc
 734 039a E7       		.byte	0xe7
 735 039b 21       		.uleb128 0x21
 736 039c 54000000 		.4byte	.LASF47
 737 03a0 54000000 		.4byte	.LASF47
 738 03a4 0B       		.byte	0xb
 739 03a5 24       		.byte	0x24
 740 03a6 22       		.uleb128 0x22
 741 03a7 6D000000 		.4byte	.LASF48
 742 03ab 6D000000 		.4byte	.LASF48
 743 03af 0D       		.byte	0xd
 744 03b0 3201     		.2byte	0x132
 745 03b2 21       		.uleb128 0x21
 746 03b3 E8000000 		.4byte	.LASF49
 747 03b7 E8000000 		.4byte	.LASF49
 748 03bb 0E       		.byte	0xe
 749 03bc AC       		.byte	0xac
 750 03bd 00       		.byte	0
 751              		.section	.debug_abbrev,"",%progbits
 752              	.Ldebug_abbrev0:
 753 0000 01       		.uleb128 0x1
 754 0001 11       		.uleb128 0x11
 755 0002 01       		.byte	0x1
 756 0003 25       		.uleb128 0x25
 757 0004 0E       		.uleb128 0xe
 758 0005 13       		.uleb128 0x13
 759 0006 0B       		.uleb128 0xb
 760 0007 03       		.uleb128 0x3
 761 0008 0E       		.uleb128 0xe
 762 0009 1B       		.uleb128 0x1b
 763 000a 0E       		.uleb128 0xe
 764 000b 55       		.uleb128 0x55
 765 000c 17       		.uleb128 0x17
 766 000d 11       		.uleb128 0x11
 767 000e 01       		.uleb128 0x1
 768 000f 10       		.uleb128 0x10
 769 0010 17       		.uleb128 0x17
 770 0011 00       		.byte	0
 771 0012 00       		.byte	0
 772 0013 02       		.uleb128 0x2
 773 0014 24       		.uleb128 0x24
 774 0015 00       		.byte	0
 775 0016 0B       		.uleb128 0xb
 776 0017 0B       		.uleb128 0xb
 777 0018 3E       		.uleb128 0x3e
 778 0019 0B       		.uleb128 0xb
 779 001a 03       		.uleb128 0x3
 780 001b 0E       		.uleb128 0xe
 781 001c 00       		.byte	0
 782 001d 00       		.byte	0
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 31


 783 001e 03       		.uleb128 0x3
 784 001f 16       		.uleb128 0x16
 785 0020 00       		.byte	0
 786 0021 03       		.uleb128 0x3
 787 0022 0E       		.uleb128 0xe
 788 0023 3A       		.uleb128 0x3a
 789 0024 0B       		.uleb128 0xb
 790 0025 3B       		.uleb128 0x3b
 791 0026 0B       		.uleb128 0xb
 792 0027 49       		.uleb128 0x49
 793 0028 13       		.uleb128 0x13
 794 0029 00       		.byte	0
 795 002a 00       		.byte	0
 796 002b 04       		.uleb128 0x4
 797 002c 24       		.uleb128 0x24
 798 002d 00       		.byte	0
 799 002e 0B       		.uleb128 0xb
 800 002f 0B       		.uleb128 0xb
 801 0030 3E       		.uleb128 0x3e
 802 0031 0B       		.uleb128 0xb
 803 0032 03       		.uleb128 0x3
 804 0033 08       		.uleb128 0x8
 805 0034 00       		.byte	0
 806 0035 00       		.byte	0
 807 0036 05       		.uleb128 0x5
 808 0037 16       		.uleb128 0x16
 809 0038 00       		.byte	0
 810 0039 03       		.uleb128 0x3
 811 003a 0E       		.uleb128 0xe
 812 003b 3A       		.uleb128 0x3a
 813 003c 0B       		.uleb128 0xb
 814 003d 3B       		.uleb128 0x3b
 815 003e 05       		.uleb128 0x5
 816 003f 49       		.uleb128 0x49
 817 0040 13       		.uleb128 0x13
 818 0041 00       		.byte	0
 819 0042 00       		.byte	0
 820 0043 06       		.uleb128 0x6
 821 0044 35       		.uleb128 0x35
 822 0045 00       		.byte	0
 823 0046 49       		.uleb128 0x49
 824 0047 13       		.uleb128 0x13
 825 0048 00       		.byte	0
 826 0049 00       		.byte	0
 827 004a 07       		.uleb128 0x7
 828 004b 0F       		.uleb128 0xf
 829 004c 00       		.byte	0
 830 004d 0B       		.uleb128 0xb
 831 004e 0B       		.uleb128 0xb
 832 004f 49       		.uleb128 0x49
 833 0050 13       		.uleb128 0x13
 834 0051 00       		.byte	0
 835 0052 00       		.byte	0
 836 0053 08       		.uleb128 0x8
 837 0054 15       		.uleb128 0x15
 838 0055 00       		.byte	0
 839 0056 27       		.uleb128 0x27
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 32


 840 0057 19       		.uleb128 0x19
 841 0058 00       		.byte	0
 842 0059 00       		.byte	0
 843 005a 09       		.uleb128 0x9
 844 005b 13       		.uleb128 0x13
 845 005c 01       		.byte	0x1
 846 005d 0B       		.uleb128 0xb
 847 005e 0B       		.uleb128 0xb
 848 005f 3A       		.uleb128 0x3a
 849 0060 0B       		.uleb128 0xb
 850 0061 3B       		.uleb128 0x3b
 851 0062 0B       		.uleb128 0xb
 852 0063 01       		.uleb128 0x1
 853 0064 13       		.uleb128 0x13
 854 0065 00       		.byte	0
 855 0066 00       		.byte	0
 856 0067 0A       		.uleb128 0xa
 857 0068 0D       		.uleb128 0xd
 858 0069 00       		.byte	0
 859 006a 03       		.uleb128 0x3
 860 006b 0E       		.uleb128 0xe
 861 006c 3A       		.uleb128 0x3a
 862 006d 0B       		.uleb128 0xb
 863 006e 3B       		.uleb128 0x3b
 864 006f 0B       		.uleb128 0xb
 865 0070 49       		.uleb128 0x49
 866 0071 13       		.uleb128 0x13
 867 0072 38       		.uleb128 0x38
 868 0073 0B       		.uleb128 0xb
 869 0074 00       		.byte	0
 870 0075 00       		.byte	0
 871 0076 0B       		.uleb128 0xb
 872 0077 01       		.uleb128 0x1
 873 0078 01       		.byte	0x1
 874 0079 49       		.uleb128 0x49
 875 007a 13       		.uleb128 0x13
 876 007b 01       		.uleb128 0x1
 877 007c 13       		.uleb128 0x13
 878 007d 00       		.byte	0
 879 007e 00       		.byte	0
 880 007f 0C       		.uleb128 0xc
 881 0080 21       		.uleb128 0x21
 882 0081 00       		.byte	0
 883 0082 49       		.uleb128 0x49
 884 0083 13       		.uleb128 0x13
 885 0084 2F       		.uleb128 0x2f
 886 0085 0B       		.uleb128 0xb
 887 0086 00       		.byte	0
 888 0087 00       		.byte	0
 889 0088 0D       		.uleb128 0xd
 890 0089 04       		.uleb128 0x4
 891 008a 01       		.byte	0x1
 892 008b 0B       		.uleb128 0xb
 893 008c 0B       		.uleb128 0xb
 894 008d 49       		.uleb128 0x49
 895 008e 13       		.uleb128 0x13
 896 008f 3A       		.uleb128 0x3a
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 33


 897 0090 0B       		.uleb128 0xb
 898 0091 3B       		.uleb128 0x3b
 899 0092 0B       		.uleb128 0xb
 900 0093 01       		.uleb128 0x1
 901 0094 13       		.uleb128 0x13
 902 0095 00       		.byte	0
 903 0096 00       		.byte	0
 904 0097 0E       		.uleb128 0xe
 905 0098 28       		.uleb128 0x28
 906 0099 00       		.byte	0
 907 009a 03       		.uleb128 0x3
 908 009b 0E       		.uleb128 0xe
 909 009c 1C       		.uleb128 0x1c
 910 009d 0B       		.uleb128 0xb
 911 009e 00       		.byte	0
 912 009f 00       		.byte	0
 913 00a0 0F       		.uleb128 0xf
 914 00a1 2E       		.uleb128 0x2e
 915 00a2 01       		.byte	0x1
 916 00a3 03       		.uleb128 0x3
 917 00a4 0E       		.uleb128 0xe
 918 00a5 3A       		.uleb128 0x3a
 919 00a6 0B       		.uleb128 0xb
 920 00a7 3B       		.uleb128 0x3b
 921 00a8 05       		.uleb128 0x5
 922 00a9 27       		.uleb128 0x27
 923 00aa 19       		.uleb128 0x19
 924 00ab 49       		.uleb128 0x49
 925 00ac 13       		.uleb128 0x13
 926 00ad 20       		.uleb128 0x20
 927 00ae 0B       		.uleb128 0xb
 928 00af 01       		.uleb128 0x1
 929 00b0 13       		.uleb128 0x13
 930 00b1 00       		.byte	0
 931 00b2 00       		.byte	0
 932 00b3 10       		.uleb128 0x10
 933 00b4 05       		.uleb128 0x5
 934 00b5 00       		.byte	0
 935 00b6 03       		.uleb128 0x3
 936 00b7 0E       		.uleb128 0xe
 937 00b8 3A       		.uleb128 0x3a
 938 00b9 0B       		.uleb128 0xb
 939 00ba 3B       		.uleb128 0x3b
 940 00bb 05       		.uleb128 0x5
 941 00bc 49       		.uleb128 0x49
 942 00bd 13       		.uleb128 0x13
 943 00be 00       		.byte	0
 944 00bf 00       		.byte	0
 945 00c0 11       		.uleb128 0x11
 946 00c1 2E       		.uleb128 0x2e
 947 00c2 00       		.byte	0
 948 00c3 3F       		.uleb128 0x3f
 949 00c4 19       		.uleb128 0x19
 950 00c5 03       		.uleb128 0x3
 951 00c6 0E       		.uleb128 0xe
 952 00c7 3A       		.uleb128 0x3a
 953 00c8 0B       		.uleb128 0xb
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 34


 954 00c9 3B       		.uleb128 0x3b
 955 00ca 0B       		.uleb128 0xb
 956 00cb 27       		.uleb128 0x27
 957 00cc 19       		.uleb128 0x19
 958 00cd 11       		.uleb128 0x11
 959 00ce 01       		.uleb128 0x1
 960 00cf 12       		.uleb128 0x12
 961 00d0 06       		.uleb128 0x6
 962 00d1 40       		.uleb128 0x40
 963 00d2 18       		.uleb128 0x18
 964 00d3 9742     		.uleb128 0x2117
 965 00d5 19       		.uleb128 0x19
 966 00d6 00       		.byte	0
 967 00d7 00       		.byte	0
 968 00d8 12       		.uleb128 0x12
 969 00d9 2E       		.uleb128 0x2e
 970 00da 01       		.byte	0x1
 971 00db 3F       		.uleb128 0x3f
 972 00dc 19       		.uleb128 0x19
 973 00dd 03       		.uleb128 0x3
 974 00de 0E       		.uleb128 0xe
 975 00df 3A       		.uleb128 0x3a
 976 00e0 0B       		.uleb128 0xb
 977 00e1 3B       		.uleb128 0x3b
 978 00e2 0B       		.uleb128 0xb
 979 00e3 27       		.uleb128 0x27
 980 00e4 19       		.uleb128 0x19
 981 00e5 11       		.uleb128 0x11
 982 00e6 01       		.uleb128 0x1
 983 00e7 12       		.uleb128 0x12
 984 00e8 06       		.uleb128 0x6
 985 00e9 40       		.uleb128 0x40
 986 00ea 18       		.uleb128 0x18
 987 00eb 9742     		.uleb128 0x2117
 988 00ed 19       		.uleb128 0x19
 989 00ee 01       		.uleb128 0x1
 990 00ef 13       		.uleb128 0x13
 991 00f0 00       		.byte	0
 992 00f1 00       		.byte	0
 993 00f2 13       		.uleb128 0x13
 994 00f3 1D       		.uleb128 0x1d
 995 00f4 01       		.byte	0x1
 996 00f5 31       		.uleb128 0x31
 997 00f6 13       		.uleb128 0x13
 998 00f7 11       		.uleb128 0x11
 999 00f8 01       		.uleb128 0x1
 1000 00f9 12       		.uleb128 0x12
 1001 00fa 06       		.uleb128 0x6
 1002 00fb 58       		.uleb128 0x58
 1003 00fc 0B       		.uleb128 0xb
 1004 00fd 59       		.uleb128 0x59
 1005 00fe 0B       		.uleb128 0xb
 1006 00ff 01       		.uleb128 0x1
 1007 0100 13       		.uleb128 0x13
 1008 0101 00       		.byte	0
 1009 0102 00       		.byte	0
 1010 0103 14       		.uleb128 0x14
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 35


 1011 0104 05       		.uleb128 0x5
 1012 0105 00       		.byte	0
 1013 0106 31       		.uleb128 0x31
 1014 0107 13       		.uleb128 0x13
 1015 0108 02       		.uleb128 0x2
 1016 0109 17       		.uleb128 0x17
 1017 010a 00       		.byte	0
 1018 010b 00       		.byte	0
 1019 010c 15       		.uleb128 0x15
 1020 010d 898201   		.uleb128 0x4109
 1021 0110 01       		.byte	0x1
 1022 0111 11       		.uleb128 0x11
 1023 0112 01       		.uleb128 0x1
 1024 0113 31       		.uleb128 0x31
 1025 0114 13       		.uleb128 0x13
 1026 0115 00       		.byte	0
 1027 0116 00       		.byte	0
 1028 0117 16       		.uleb128 0x16
 1029 0118 8A8201   		.uleb128 0x410a
 1030 011b 00       		.byte	0
 1031 011c 02       		.uleb128 0x2
 1032 011d 18       		.uleb128 0x18
 1033 011e 9142     		.uleb128 0x2111
 1034 0120 18       		.uleb128 0x18
 1035 0121 00       		.byte	0
 1036 0122 00       		.byte	0
 1037 0123 17       		.uleb128 0x17
 1038 0124 898201   		.uleb128 0x4109
 1039 0127 00       		.byte	0
 1040 0128 11       		.uleb128 0x11
 1041 0129 01       		.uleb128 0x1
 1042 012a 31       		.uleb128 0x31
 1043 012b 13       		.uleb128 0x13
 1044 012c 00       		.byte	0
 1045 012d 00       		.byte	0
 1046 012e 18       		.uleb128 0x18
 1047 012f 898201   		.uleb128 0x4109
 1048 0132 01       		.byte	0x1
 1049 0133 11       		.uleb128 0x11
 1050 0134 01       		.uleb128 0x1
 1051 0135 31       		.uleb128 0x31
 1052 0136 13       		.uleb128 0x13
 1053 0137 01       		.uleb128 0x1
 1054 0138 13       		.uleb128 0x13
 1055 0139 00       		.byte	0
 1056 013a 00       		.byte	0
 1057 013b 19       		.uleb128 0x19
 1058 013c 2E       		.uleb128 0x2e
 1059 013d 01       		.byte	0x1
 1060 013e 3F       		.uleb128 0x3f
 1061 013f 19       		.uleb128 0x19
 1062 0140 03       		.uleb128 0x3
 1063 0141 0E       		.uleb128 0xe
 1064 0142 3A       		.uleb128 0x3a
 1065 0143 0B       		.uleb128 0xb
 1066 0144 3B       		.uleb128 0x3b
 1067 0145 0B       		.uleb128 0xb
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 36


 1068 0146 27       		.uleb128 0x27
 1069 0147 19       		.uleb128 0x19
 1070 0148 11       		.uleb128 0x11
 1071 0149 01       		.uleb128 0x1
 1072 014a 12       		.uleb128 0x12
 1073 014b 06       		.uleb128 0x6
 1074 014c 40       		.uleb128 0x40
 1075 014d 18       		.uleb128 0x18
 1076 014e 9642     		.uleb128 0x2116
 1077 0150 19       		.uleb128 0x19
 1078 0151 01       		.uleb128 0x1
 1079 0152 13       		.uleb128 0x13
 1080 0153 00       		.byte	0
 1081 0154 00       		.byte	0
 1082 0155 1A       		.uleb128 0x1a
 1083 0156 34       		.uleb128 0x34
 1084 0157 00       		.byte	0
 1085 0158 03       		.uleb128 0x3
 1086 0159 0E       		.uleb128 0xe
 1087 015a 3A       		.uleb128 0x3a
 1088 015b 0B       		.uleb128 0xb
 1089 015c 3B       		.uleb128 0x3b
 1090 015d 0B       		.uleb128 0xb
 1091 015e 49       		.uleb128 0x49
 1092 015f 13       		.uleb128 0x13
 1093 0160 02       		.uleb128 0x2
 1094 0161 18       		.uleb128 0x18
 1095 0162 00       		.byte	0
 1096 0163 00       		.byte	0
 1097 0164 1B       		.uleb128 0x1b
 1098 0165 34       		.uleb128 0x34
 1099 0166 00       		.byte	0
 1100 0167 03       		.uleb128 0x3
 1101 0168 0E       		.uleb128 0xe
 1102 0169 3A       		.uleb128 0x3a
 1103 016a 0B       		.uleb128 0xb
 1104 016b 3B       		.uleb128 0x3b
 1105 016c 0B       		.uleb128 0xb
 1106 016d 49       		.uleb128 0x49
 1107 016e 13       		.uleb128 0x13
 1108 016f 00       		.byte	0
 1109 0170 00       		.byte	0
 1110 0171 1C       		.uleb128 0x1c
 1111 0172 34       		.uleb128 0x34
 1112 0173 00       		.byte	0
 1113 0174 03       		.uleb128 0x3
 1114 0175 08       		.uleb128 0x8
 1115 0176 3A       		.uleb128 0x3a
 1116 0177 0B       		.uleb128 0xb
 1117 0178 3B       		.uleb128 0x3b
 1118 0179 0B       		.uleb128 0xb
 1119 017a 49       		.uleb128 0x49
 1120 017b 13       		.uleb128 0x13
 1121 017c 02       		.uleb128 0x2
 1122 017d 17       		.uleb128 0x17
 1123 017e 00       		.byte	0
 1124 017f 00       		.byte	0
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 37


 1125 0180 1D       		.uleb128 0x1d
 1126 0181 0B       		.uleb128 0xb
 1127 0182 01       		.byte	0x1
 1128 0183 11       		.uleb128 0x11
 1129 0184 01       		.uleb128 0x1
 1130 0185 12       		.uleb128 0x12
 1131 0186 06       		.uleb128 0x6
 1132 0187 01       		.uleb128 0x1
 1133 0188 13       		.uleb128 0x13
 1134 0189 00       		.byte	0
 1135 018a 00       		.byte	0
 1136 018b 1E       		.uleb128 0x1e
 1137 018c 34       		.uleb128 0x34
 1138 018d 00       		.byte	0
 1139 018e 03       		.uleb128 0x3
 1140 018f 0E       		.uleb128 0xe
 1141 0190 3A       		.uleb128 0x3a
 1142 0191 0B       		.uleb128 0xb
 1143 0192 3B       		.uleb128 0x3b
 1144 0193 0B       		.uleb128 0xb
 1145 0194 49       		.uleb128 0x49
 1146 0195 13       		.uleb128 0x13
 1147 0196 3F       		.uleb128 0x3f
 1148 0197 19       		.uleb128 0x19
 1149 0198 3C       		.uleb128 0x3c
 1150 0199 19       		.uleb128 0x19
 1151 019a 00       		.byte	0
 1152 019b 00       		.byte	0
 1153 019c 1F       		.uleb128 0x1f
 1154 019d 21       		.uleb128 0x21
 1155 019e 00       		.byte	0
 1156 019f 00       		.byte	0
 1157 01a0 00       		.byte	0
 1158 01a1 20       		.uleb128 0x20
 1159 01a2 34       		.uleb128 0x34
 1160 01a3 00       		.byte	0
 1161 01a4 03       		.uleb128 0x3
 1162 01a5 0E       		.uleb128 0xe
 1163 01a6 3A       		.uleb128 0x3a
 1164 01a7 0B       		.uleb128 0xb
 1165 01a8 3B       		.uleb128 0x3b
 1166 01a9 0B       		.uleb128 0xb
 1167 01aa 49       		.uleb128 0x49
 1168 01ab 13       		.uleb128 0x13
 1169 01ac 3F       		.uleb128 0x3f
 1170 01ad 19       		.uleb128 0x19
 1171 01ae 02       		.uleb128 0x2
 1172 01af 18       		.uleb128 0x18
 1173 01b0 00       		.byte	0
 1174 01b1 00       		.byte	0
 1175 01b2 21       		.uleb128 0x21
 1176 01b3 2E       		.uleb128 0x2e
 1177 01b4 00       		.byte	0
 1178 01b5 3F       		.uleb128 0x3f
 1179 01b6 19       		.uleb128 0x19
 1180 01b7 3C       		.uleb128 0x3c
 1181 01b8 19       		.uleb128 0x19
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 38


 1182 01b9 6E       		.uleb128 0x6e
 1183 01ba 0E       		.uleb128 0xe
 1184 01bb 03       		.uleb128 0x3
 1185 01bc 0E       		.uleb128 0xe
 1186 01bd 3A       		.uleb128 0x3a
 1187 01be 0B       		.uleb128 0xb
 1188 01bf 3B       		.uleb128 0x3b
 1189 01c0 0B       		.uleb128 0xb
 1190 01c1 00       		.byte	0
 1191 01c2 00       		.byte	0
 1192 01c3 22       		.uleb128 0x22
 1193 01c4 2E       		.uleb128 0x2e
 1194 01c5 00       		.byte	0
 1195 01c6 3F       		.uleb128 0x3f
 1196 01c7 19       		.uleb128 0x19
 1197 01c8 3C       		.uleb128 0x3c
 1198 01c9 19       		.uleb128 0x19
 1199 01ca 6E       		.uleb128 0x6e
 1200 01cb 0E       		.uleb128 0xe
 1201 01cc 03       		.uleb128 0x3
 1202 01cd 0E       		.uleb128 0xe
 1203 01ce 3A       		.uleb128 0x3a
 1204 01cf 0B       		.uleb128 0xb
 1205 01d0 3B       		.uleb128 0x3b
 1206 01d1 05       		.uleb128 0x5
 1207 01d2 00       		.byte	0
 1208 01d3 00       		.byte	0
 1209 01d4 00       		.byte	0
 1210              		.section	.debug_loc,"",%progbits
 1211              	.Ldebug_loc0:
 1212              	.LLST0:
 1213 0000 0E000000 		.4byte	.LVL1
 1214 0004 16000000 		.4byte	.LVL2
 1215 0008 0600     		.2byte	0x6
 1216 000a 03       		.byte	0x3
 1217 000b 00000000 		.4byte	DmaIntHandler
 1218 000f 9F       		.byte	0x9f
 1219 0010 00000000 		.4byte	0
 1220 0014 00000000 		.4byte	0
 1221              	.LLST1:
 1222 0018 04000000 		.4byte	.LVL4
 1223 001c 08000000 		.4byte	.LVL5
 1224 0020 0200     		.2byte	0x2
 1225 0022 30       		.byte	0x30
 1226 0023 9F       		.byte	0x9f
 1227 0024 08000000 		.4byte	.LVL5
 1228 0028 9A000000 		.4byte	.LVL15
 1229 002c 0100     		.2byte	0x1
 1230 002e 54       		.byte	0x54
 1231 002f 00000000 		.4byte	0
 1232 0033 00000000 		.4byte	0
 1233              	.LLST2:
 1234 0037 48000000 		.4byte	.LVL8
 1235 003b 70000000 		.4byte	.LVL10
 1236 003f 0100     		.2byte	0x1
 1237 0041 55       		.byte	0x55
 1238 0042 00000000 		.4byte	0
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 39


 1239 0046 00000000 		.4byte	0
 1240              		.section	.debug_aranges,"",%progbits
 1241 0000 2C000000 		.4byte	0x2c
 1242 0004 0200     		.2byte	0x2
 1243 0006 00000000 		.4byte	.Ldebug_info0
 1244 000a 04       		.byte	0x4
 1245 000b 00       		.byte	0
 1246 000c 0000     		.2byte	0
 1247 000e 0000     		.2byte	0
 1248 0010 00000000 		.4byte	.LFB34
 1249 0014 02000000 		.4byte	.LFE34-.LFB34
 1250 0018 00000000 		.4byte	.LFB35
 1251 001c 28000000 		.4byte	.LFE35-.LFB35
 1252 0020 00000000 		.4byte	.LFB36
 1253 0024 C0000000 		.4byte	.LFE36-.LFB36
 1254 0028 00000000 		.4byte	0
 1255 002c 00000000 		.4byte	0
 1256              		.section	.debug_ranges,"",%progbits
 1257              	.Ldebug_ranges0:
 1258 0000 00000000 		.4byte	.LFB34
 1259 0004 02000000 		.4byte	.LFE34
 1260 0008 00000000 		.4byte	.LFB35
 1261 000c 28000000 		.4byte	.LFE35
 1262 0010 00000000 		.4byte	.LFB36
 1263 0014 C0000000 		.4byte	.LFE36
 1264 0018 00000000 		.4byte	0
 1265 001c 00000000 		.4byte	0
 1266              		.section	.debug_line,"",%progbits
 1267              	.Ldebug_line0:
 1268 0000 CC020000 		.section	.debug_str,"MS",%progbits,1
 1268      02004902 
 1268      00000201 
 1268      FB0E0D00 
 1268      01010101 
 1269              	.LASF29:
 1270 0000 766F6C5F 		.ascii	"vol_ctrl_left\000"
 1270      6374726C 
 1270      5F6C6566 
 1270      7400
 1271              	.LASF18:
 1272 000e 72656733 		.ascii	"reg32\000"
 1272      3200
 1273              	.LASF51:
 1274 0014 566F6C75 		.ascii	"VolumeControl.c\000"
 1274      6D65436F 
 1274      6E74726F 
 1274      6C2E6300 
 1275              	.LASF21:
 1276 0024 7369676E 		.ascii	"signature\000"
 1276      61747572 
 1276      6500
 1277              	.LASF25:
 1278 002e 6C65645F 		.ascii	"led_max_brightness\000"
 1278      6D61785F 
 1278      62726967 
 1278      68746E65 
 1278      737300
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 40


 1279              	.LASF3:
 1280 0041 73686F72 		.ascii	"short unsigned int\000"
 1280      7420756E 
 1280      7369676E 
 1280      65642069 
 1280      6E7400
 1281              	.LASF47:
 1282 0054 55534255 		.ascii	"USBUART_PutString\000"
 1282      4152545F 
 1282      50757453 
 1282      7472696E 
 1282      6700
 1283              	.LASF16:
 1284 0066 646F7562 		.ascii	"double\000"
 1284      6C6500
 1285              	.LASF48:
 1286 006d 55534255 		.ascii	"USBUART_GetConfiguration\000"
 1286      4152545F 
 1286      47657443 
 1286      6F6E6669 
 1286      67757261 
 1287              	.LASF41:
 1288 0086 4379446D 		.ascii	"CyDmaSetInterruptCallback\000"
 1288      61536574 
 1288      496E7465 
 1288      72727570 
 1288      7443616C 
 1289              	.LASF55:
 1290 00a0 446D6149 		.ascii	"DmaIntHandler\000"
 1290      6E744861 
 1290      6E646C65 
 1290      7200
 1291              	.LASF15:
 1292 00ae 666C6F61 		.ascii	"float\000"
 1292      7400
 1293              	.LASF56:
 1294 00b4 766F6C75 		.ascii	"volume\000"
 1294      6D6500
 1295              	.LASF11:
 1296 00bb 75696E74 		.ascii	"uint8\000"
 1296      3800
 1297              	.LASF1:
 1298 00c1 756E7369 		.ascii	"unsigned char\000"
 1298      676E6564 
 1298      20636861 
 1298      7200
 1299              	.LASF53:
 1300 00cf 444D415F 		.ascii	"DMA_SetInterruptCallback\000"
 1300      53657449 
 1300      6E746572 
 1300      72757074 
 1300      43616C6C 
 1301              	.LASF49:
 1302 00e8 436F6465 		.ascii	"Codec_AdjustBothHeadphoneVolumeLevel\000"
 1302      635F4164 
 1302      6A757374 
 1302      426F7468 
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 41


 1302      48656164 
 1303              	.LASF13:
 1304 010d 696E7431 		.ascii	"int16\000"
 1304      3600
 1305              	.LASF52:
 1306 0113 433A5C64 		.ascii	"C:\\dev\\git\\icebreaker\\Icebreaker.cydsn\000"
 1306      65765C67 
 1306      69745C69 
 1306      63656272 
 1306      65616B65 
 1307              	.LASF14:
 1308 013a 696E7433 		.ascii	"int32\000"
 1308      3200
 1309              	.LASF54:
 1310 0140 63616C6C 		.ascii	"callback\000"
 1310      6261636B 
 1310      00
 1311              	.LASF9:
 1312 0149 5F5F7569 		.ascii	"__uint32_t\000"
 1312      6E743332 
 1312      5F7400
 1313              	.LASF27:
 1314 0154 63616C69 		.ascii	"calibration_data_s\000"
 1314      62726174 
 1314      696F6E5F 
 1314      64617461 
 1314      5F7300
 1315              	.LASF22:
 1316 0167 636F756E 		.ascii	"counter\000"
 1316      74657200 
 1317              	.LASF30:
 1318 016f 766F6C5F 		.ascii	"vol_ctrl_both\000"
 1318      6374726C 
 1318      5F626F74 
 1318      6800
 1319              	.LASF26:
 1320 017d 64656275 		.ascii	"debug_mask\000"
 1320      675F6D61 
 1320      736B00
 1321              	.LASF2:
 1322 0188 73686F72 		.ascii	"short int\000"
 1322      7420696E 
 1322      7400
 1323              	.LASF40:
 1324 0192 4144435F 		.ascii	"ADC_MAX_READING\000"
 1324      4D41585F 
 1324      52454144 
 1324      494E4700 
 1325              	.LASF36:
 1326 01a2 746D7243 		.ascii	"tmrCounter_ms\000"
 1326      6F756E74 
 1326      65725F6D 
 1326      7300
 1327              	.LASF35:
 1328 01b0 63616C5F 		.ascii	"cal_data\000"
 1328      64617461 
 1328      00
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 42


 1329              	.LASF12:
 1330 01b9 75696E74 		.ascii	"uint32\000"
 1330      333200
 1331              	.LASF5:
 1332 01c0 6C6F6E67 		.ascii	"long unsigned int\000"
 1332      20756E73 
 1332      69676E65 
 1332      6420696E 
 1332      7400
 1333              	.LASF8:
 1334 01d2 756E7369 		.ascii	"unsigned int\000"
 1334      676E6564 
 1334      20696E74 
 1334      00
 1335              	.LASF7:
 1336 01df 6C6F6E67 		.ascii	"long long unsigned int\000"
 1336      206C6F6E 
 1336      6720756E 
 1336      7369676E 
 1336      65642069 
 1337              	.LASF24:
 1338 01f6 6164635F 		.ascii	"adc_max\000"
 1338      6D617800 
 1339              	.LASF45:
 1340 01fe 55534255 		.ascii	"USBUART_CDCIsReady\000"
 1340      4152545F 
 1340      43444349 
 1340      73526561 
 1340      647900
 1341              	.LASF42:
 1342 0211 4144435F 		.ascii	"ADC_Start\000"
 1342      53746172 
 1342      7400
 1343              	.LASF31:
 1344 021b 6379646D 		.ascii	"cydma_callback_t\000"
 1344      615F6361 
 1344      6C6C6261 
 1344      636B5F74 
 1344      00
 1345              	.LASF50:
 1346 022c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1346      43313120 
 1346      352E342E 
 1346      31203230 
 1346      31363036 
 1347 025f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 1347      20726576 
 1347      6973696F 
 1347      6E203233 
 1347      37373135 
 1348 0292 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1348      66756E63 
 1348      74696F6E 
 1348      2D736563 
 1348      74696F6E 
 1349              	.LASF19:
 1350 02ba 6C6F6E67 		.ascii	"long double\000"
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 43


 1350      20646F75 
 1350      626C6500 
 1351              	.LASF20:
 1352 02c6 73697A65 		.ascii	"sizetype\000"
 1352      74797065 
 1352      00
 1353              	.LASF6:
 1354 02cf 6C6F6E67 		.ascii	"long long int\000"
 1354      206C6F6E 
 1354      6720696E 
 1354      7400
 1355              	.LASF17:
 1356 02dd 63686172 		.ascii	"char\000"
 1356      00
 1357              	.LASF23:
 1358 02e2 6164635F 		.ascii	"adc_min\000"
 1358      6D696E00 
 1359              	.LASF39:
 1360 02ea 4144435F 		.ascii	"ADC_MIN_READING\000"
 1360      4D494E5F 
 1360      52454144 
 1360      494E4700 
 1361              	.LASF38:
 1362 02fa 61646353 		.ascii	"adcSample\000"
 1362      616D706C 
 1362      6500
 1363              	.LASF28:
 1364 0304 766F6C5F 		.ascii	"vol_ctrl_right\000"
 1364      6374726C 
 1364      5F726967 
 1364      687400
 1365              	.LASF32:
 1366 0313 566F6C75 		.ascii	"VolumeControlInit\000"
 1366      6D65436F 
 1366      6E74726F 
 1366      6C496E69 
 1366      7400
 1367              	.LASF37:
 1368 0325 67627566 		.ascii	"gbuf\000"
 1368      00
 1369              	.LASF10:
 1370 032a 75696E74 		.ascii	"uint32_t\000"
 1370      33325F74 
 1370      00
 1371              	.LASF4:
 1372 0333 6C6F6E67 		.ascii	"long int\000"
 1372      20696E74 
 1372      00
 1373              	.LASF33:
 1374 033c 566F6C75 		.ascii	"VolumeControlService\000"
 1374      6D65436F 
 1374      6E74726F 
 1374      6C536572 
 1374      76696365 
 1375              	.LASF0:
 1376 0351 7369676E 		.ascii	"signed char\000"
 1376      65642063 
ARM GAS  C:\Users\TERENC~1\AppData\Local\Temp\ccnznBG6.s 			page 44


 1376      68617200 
 1377              	.LASF43:
 1378 035d 444D415F 		.ascii	"DMA_Start\000"
 1378      53746172 
 1378      7400
 1379              	.LASF44:
 1380 0367 4144435F 		.ascii	"ADC_StartConvert\000"
 1380      53746172 
 1380      74436F6E 
 1380      76657274 
 1380      00
 1381              	.LASF34:
 1382 0378 70726576 		.ascii	"prevVol\000"
 1382      566F6C00 
 1383              	.LASF46:
 1384 0380 73707269 		.ascii	"sprintf\000"
 1384      6E746600 
 1385              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
